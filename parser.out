Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> OPEN declaracion CLOSE
Rule 2     programa -> OPEN declaracion
Rule 3     programa -> declaracion CLOSE
Rule 4     programa -> declaracion
Rule 5     programa -> CLOSE
Rule 6     programa -> OPEN
Rule 7     declaracion -> expression
Rule 8     declaracion -> expif
Rule 9     declaracion -> expelse
Rule 10    declaracion -> expresionlogica
Rule 11    declaracion -> declararvariable
Rule 12    declaracion -> creacionfunciones
Rule 13    declaracion -> returnvalores
Rule 14    declaracion -> operador_object
Rule 15    declaracion -> print
Rule 16    declaracion -> arreglos
Rule 17    declaracion -> while
Rule 18    declaracion -> foreach
Rule 19    declaracion -> clase
Rule 20    declaracion -> declaracion
Rule 21    creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
Rule 22    empty -> <empty>
Rule 23    argumentos -> ID
Rule 24    argumentos -> empty
Rule 25    returnvalores -> RETURN termino END
Rule 26    returnvalores -> RETURN creacionfunciones
Rule 27    returnvalores -> empty
Rule 28    expression -> ID EQUALS operacion_matematica END
Rule 29    operacion_matematica -> termino operadores operacion_matematica
Rule 30    operacion_matematica -> termino operadores termino
Rule 31    operadores -> PLUS
Rule 32    operadores -> MINUS
Rule 33    operadores -> DIVIDE
Rule 34    operadores -> TIMES
Rule 35    operadores -> MODULO
Rule 36    termino -> NUMBER
Rule 37    termino -> ID
Rule 38    termino -> DECIMAL
Rule 39    expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
Rule 40    expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET
Rule 41    expif -> declaracion RCORCHET
Rule 42    expif -> declaracion
Rule 43    expif -> RCORCHET
Rule 44    expelse -> expif ELSE LCORCHET declaracion RCORCHET
Rule 45    funcion_condicion -> IF
Rule 46    funcion_condicion -> ELSEIF
Rule 47    control_bucle -> BREAK
Rule 48    control_bucle -> CONTINUE
Rule 49    control_bucle -> declaracion
Rule 50    while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
Rule 51    foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
Rule 52    comparacion -> termino operadorcomparacion termino
Rule 53    operadorcomparacion -> IS_EQUAL
Rule 54    operadorcomparacion -> IS_IDENTICAL
Rule 55    operadorcomparacion -> IS_NOT_EQUAL
Rule 56    operadorcomparacion -> IS_NOT_IDENTICAL
Rule 57    operadorcomparacion -> IS_GREATER_OR_EQUAL
Rule 58    operadorcomparacion -> IS_SMALLER_OR_EQUAL
Rule 59    operadorcomparacion -> SPACESHIP
Rule 60    operadorcomparacion -> MAYORQUE
Rule 61    operadorcomparacion -> MENORQUE
Rule 62    expresionlogica -> ID operadorlogico ID
Rule 63    operadorlogico -> AND
Rule 64    operadorlogico -> OR
Rule 65    operadorlogico -> XOR
Rule 66    operadorlogico -> NOT
Rule 67    declararvariable -> ID EQUALS tipo END
Rule 68    tipo -> boolean
Rule 69    tipo -> NUMBER
Rule 70    tipo -> TEXT
Rule 71    tipo -> NULL
Rule 72    tipo -> archivos
Rule 73    tipo -> array
Rule 74    tipo -> new
Rule 75    boolean -> TRUE
Rule 76    boolean -> FALSE
Rule 77    operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
Rule 78    array -> ARRAY LPAREN valores_array RPAREN
Rule 79    valores_array -> elementos_array COMA valores_array
Rule 80    valores_array -> elementos_array
Rule 81    valores_array -> empty
Rule 82    elementos_array -> NUMBER
Rule 83    elementos_array -> TEXT
Rule 84    elementos_array -> empty
Rule 85    elementos_array -> boolean
Rule 86    elementos_array -> array
Rule 87    new -> NEW FNOMBRE
Rule 88    print -> funcion_print LPAREN argument RPAREN END
Rule 89    print -> funcion_print argument END
Rule 90    print -> ECHO LPAREN valores_echo RPAREN END
Rule 91    print -> ECHO valores_echo END
Rule 92    argument -> ID
Rule 93    argument -> TEXT
Rule 94    valores_echo -> argument COMA valores_echo
Rule 95    valores_echo -> argument
Rule 96    funcion_print -> VAR_EXPORT
Rule 97    funcion_print -> ECHO
Rule 98    funcion_print -> PRINT
Rule 99    funcion_print -> PRINT_R
Rule 100   funcion_print -> VAR_DUMP
Rule 101   arreglos -> funcion_arreglo LPAREN ID RPAREN
Rule 102   funcion_arreglo -> SUFFLE
Rule 103   funcion_arreglo -> ARRAY_MERGE
Rule 104   funcion_arreglo -> ARRAY_SEARCH
Rule 105   funcion_arreglo -> ARRAY_RAND
Rule 106   funcion_arreglo -> ARRAY_CHUNK
Rule 107   funcion_arreglo -> STR_SPLIT
Rule 108   funcion_arreglo -> PREG_SPLIT
Rule 109   funcion_arreglo -> ARRAY_UNIQUE
Rule 110   funcion_arreglo -> COUNT
Rule 111   funcion_arreglo -> SIZEOF
Rule 112   funcion_arreglo -> ARRAY_PUSH
Rule 113   funcion_arreglo -> SORT
Rule 114   funcion_arreglo -> ASORT
Rule 115   funcion_arreglo -> KSORT
Rule 116   funcion_arreglo -> UNSET
Rule 117   funcion_arreglo -> IMPLODE
Rule 118   funcion_arreglo -> EXPLODE
Rule 119   archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN
Rule 120   funcion_archivo -> FGETS
Rule 121   funcion_archivo -> FREAD
Rule 122   funcion_archivo -> FSCANF
Rule 123   funcion_archivo -> FPASSTHRU
Rule 124   funcion_archivo -> FGETCSV
Rule 125   funcion_archivo -> FGETC
Rule 126   funcion_archivo -> FILE_GET_CONTENTS
Rule 127   funcion_archivo -> READFILE
Rule 128   funcion_archivo -> FILE
Rule 129   funcion_archivo -> PARSE_INI_FILE
Rule 130   clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET

Terminals, with rules where they appear

AND                  : 63
ARRAY                : 78
ARRAY_CHUNK          : 106
ARRAY_MERGE          : 103
ARRAY_PUSH           : 112
ARRAY_RAND           : 105
ARRAY_SEARCH         : 104
ARRAY_UNIQUE         : 109
AS                   : 51
ASORT                : 114
BREAK                : 47
CLASS                : 130
CLOSE                : 1 3 5
COMA                 : 79 94 119
CONTINUE             : 48
COUNT                : 110
DECIMAL              : 38
DIVIDE               : 33
ECHO                 : 90 91 97
ELSE                 : 44
ELSEIF               : 46
END                  : 25 28 67 77 88 89 90 91
EQUALS               : 28 67 77
EXPLODE              : 118
FALSE                : 76
FGETC                : 125
FGETCSV              : 124
FGETS                : 120
FILE                 : 128
FILE_GET_CONTENTS    : 126
FNOMBRE              : 21 77 87 130
FOREACH              : 51
FPASSTHRU            : 123
FREAD                : 121
FSCANF               : 122
FUNCTION             : 21
ID                   : 23 28 37 51 51 62 62 67 77 92 101
IF                   : 45
IMPLODE              : 117
IS_EQUAL             : 53
IS_GREATER_OR_EQUAL  : 57
IS_IDENTICAL         : 54
IS_NOT_EQUAL         : 55
IS_NOT_IDENTICAL     : 56
IS_SMALLER_OR_EQUAL  : 58
KSORT                : 115
LCORCHET             : 21 39 40 44 50 51 130
LPAREN               : 21 39 40 50 51 77 78 88 90 101 119
MAYORQUE             : 60
MENORQUE             : 61
MINUS                : 32
MODULO               : 35
NEW                  : 87
NOT                  : 66
NULL                 : 71
NUMBER               : 36 69 82
OBJECT_OPERATOR      : 77
OPEN                 : 1 2 6
OR                   : 64
PARSE_INI_FILE       : 129
PLUS                 : 31
PREG_SPLIT           : 108
PRINT                : 98
PRINT_R              : 99
RCORCHET             : 21 39 41 43 44 50 51 130
READFILE             : 127
RETURN               : 25 26
RPAREN               : 21 39 40 50 51 77 78 88 90 101 119
SIZEOF               : 111
SORT                 : 113
SPACESHIP            : 59
STR_SPLIT            : 107
SUFFLE               : 102
TEXT                 : 70 83 93 119 119
TIMES                : 34
TRUE                 : 75
UNSET                : 116
VAR_DUMP             : 100
VAR_EXPORT           : 96
WHILE                : 50
XOR                  : 65
error                : 

Nonterminals, with rules where they appear

archivos             : 72
argument             : 88 89 94 95
argumentos           : 77
array                : 73 86
arreglos             : 16
boolean              : 68 85
clase                : 19
comparacion          : 39 40 50
control_bucle        : 50 51
creacionfunciones    : 12 26
declaracion          : 1 2 3 4 20 21 39 41 42 44 49 130
declararvariable     : 11
elementos_array      : 79 80
empty                : 24 27 81 84
expelse              : 9
expif                : 8 44
expresionlogica      : 10
expression           : 7
foreach              : 18
funcion_archivo      : 119
funcion_arreglo      : 101
funcion_condicion    : 39 40
funcion_print        : 88 89
new                  : 74
operacion_matematica : 28 29
operador_object      : 14
operadorcomparacion  : 52
operadores           : 29 30
operadorlogico       : 62
print                : 15
programa             : 0
returnvalores        : 13
termino              : 25 29 30 30 52 52
tipo                 : 67
valores_array        : 78 79
valores_echo         : 90 91 94
while                : 17

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . OPEN declaracion CLOSE
    (2) programa -> . OPEN declaracion
    (3) programa -> . declaracion CLOSE
    (4) programa -> . declaracion
    (5) programa -> . CLOSE
    (6) programa -> . OPEN
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
    OPEN            shift and go to state 2
    CLOSE           shift and go to state 4
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    $end            reduce using rule 22 (empty -> .)
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! CLOSE           [ reduce using rule 22 (empty -> .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    programa                       shift and go to state 1
    declaracion                    shift and go to state 3
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 1

    (0) S' -> programa .



state 2

    (1) programa -> OPEN . declaracion CLOSE
    (2) programa -> OPEN . declaracion
    (6) programa -> OPEN .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 6 (programa -> OPEN .)
    $end            reduce using rule 6 (programa -> OPEN .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    CLOSE           reduce using rule 22 (empty -> .)
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]
  ! $end            [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 53
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 3

    (3) programa -> declaracion . CLOSE
    (4) programa -> declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for CLOSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    CLOSE           shift and go to state 54
    $end            reduce using rule 4 (programa -> declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 55

  ! CLOSE           [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! $end            [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! CLOSE           [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! $end            [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 4

    (5) programa -> CLOSE .

    $end            reduce using rule 5 (programa -> CLOSE .)


state 5

    (7) declaracion -> expression .

    CLOSE           reduce using rule 7 (declaracion -> expression .)
    RCORCHET        reduce using rule 7 (declaracion -> expression .)
    $end            reduce using rule 7 (declaracion -> expression .)
    ELSE            reduce using rule 7 (declaracion -> expression .)


state 6

    (8) declaracion -> expif .
    (44) expelse -> expif . ELSE LCORCHET declaracion RCORCHET

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE           reduce using rule 8 (declaracion -> expif .)
    RCORCHET        reduce using rule 8 (declaracion -> expif .)
    $end            reduce using rule 8 (declaracion -> expif .)
    ELSE            shift and go to state 56

  ! ELSE            [ reduce using rule 8 (declaracion -> expif .) ]


state 7

    (9) declaracion -> expelse .

    CLOSE           reduce using rule 9 (declaracion -> expelse .)
    RCORCHET        reduce using rule 9 (declaracion -> expelse .)
    $end            reduce using rule 9 (declaracion -> expelse .)
    ELSE            reduce using rule 9 (declaracion -> expelse .)


state 8

    (10) declaracion -> expresionlogica .

    CLOSE           reduce using rule 10 (declaracion -> expresionlogica .)
    RCORCHET        reduce using rule 10 (declaracion -> expresionlogica .)
    $end            reduce using rule 10 (declaracion -> expresionlogica .)
    ELSE            reduce using rule 10 (declaracion -> expresionlogica .)


state 9

    (11) declaracion -> declararvariable .

    CLOSE           reduce using rule 11 (declaracion -> declararvariable .)
    RCORCHET        reduce using rule 11 (declaracion -> declararvariable .)
    $end            reduce using rule 11 (declaracion -> declararvariable .)
    ELSE            reduce using rule 11 (declaracion -> declararvariable .)


state 10

    (12) declaracion -> creacionfunciones .

    CLOSE           reduce using rule 12 (declaracion -> creacionfunciones .)
    RCORCHET        reduce using rule 12 (declaracion -> creacionfunciones .)
    $end            reduce using rule 12 (declaracion -> creacionfunciones .)
    ELSE            reduce using rule 12 (declaracion -> creacionfunciones .)


state 11

    (13) declaracion -> returnvalores .

    CLOSE           reduce using rule 13 (declaracion -> returnvalores .)
    RCORCHET        reduce using rule 13 (declaracion -> returnvalores .)
    $end            reduce using rule 13 (declaracion -> returnvalores .)
    ELSE            reduce using rule 13 (declaracion -> returnvalores .)


state 12

    (14) declaracion -> operador_object .

    CLOSE           reduce using rule 14 (declaracion -> operador_object .)
    RCORCHET        reduce using rule 14 (declaracion -> operador_object .)
    $end            reduce using rule 14 (declaracion -> operador_object .)
    ELSE            reduce using rule 14 (declaracion -> operador_object .)


state 13

    (15) declaracion -> print .

    CLOSE           reduce using rule 15 (declaracion -> print .)
    RCORCHET        reduce using rule 15 (declaracion -> print .)
    $end            reduce using rule 15 (declaracion -> print .)
    ELSE            reduce using rule 15 (declaracion -> print .)


state 14

    (16) declaracion -> arreglos .

    CLOSE           reduce using rule 16 (declaracion -> arreglos .)
    RCORCHET        reduce using rule 16 (declaracion -> arreglos .)
    $end            reduce using rule 16 (declaracion -> arreglos .)
    ELSE            reduce using rule 16 (declaracion -> arreglos .)


state 15

    (17) declaracion -> while .

    CLOSE           reduce using rule 17 (declaracion -> while .)
    RCORCHET        reduce using rule 17 (declaracion -> while .)
    $end            reduce using rule 17 (declaracion -> while .)
    ELSE            reduce using rule 17 (declaracion -> while .)


state 16

    (18) declaracion -> foreach .

    CLOSE           reduce using rule 18 (declaracion -> foreach .)
    RCORCHET        reduce using rule 18 (declaracion -> foreach .)
    $end            reduce using rule 18 (declaracion -> foreach .)
    ELSE            reduce using rule 18 (declaracion -> foreach .)


state 17

    (19) declaracion -> clase .

    CLOSE           reduce using rule 19 (declaracion -> clase .)
    RCORCHET        reduce using rule 19 (declaracion -> clase .)
    $end            reduce using rule 19 (declaracion -> clase .)
    ELSE            reduce using rule 19 (declaracion -> clase .)


state 18

    (28) expression -> ID . EQUALS operacion_matematica END
    (62) expresionlogica -> ID . operadorlogico ID
    (67) declararvariable -> ID . EQUALS tipo END
    (77) operador_object -> ID . EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (63) operadorlogico -> . AND
    (64) operadorlogico -> . OR
    (65) operadorlogico -> . XOR
    (66) operadorlogico -> . NOT

    EQUALS          shift and go to state 57
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    NOT             shift and go to state 62

    operadorlogico                 shift and go to state 58

state 19

    (39) expif -> funcion_condicion . LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion . LPAREN comparacion RPAREN LCORCHET

    LPAREN          shift and go to state 63


state 20

    (43) expif -> RCORCHET .

    CLOSE           reduce using rule 43 (expif -> RCORCHET .)
    RCORCHET        reduce using rule 43 (expif -> RCORCHET .)
    $end            reduce using rule 43 (expif -> RCORCHET .)
    ELSE            reduce using rule 43 (expif -> RCORCHET .)


state 21

    (21) creacionfunciones -> FUNCTION . FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET

    FNOMBRE         shift and go to state 64


state 22

    (25) returnvalores -> RETURN . termino END
    (26) returnvalores -> RETURN . creacionfunciones
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET

    NUMBER          shift and go to state 67
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69
    FUNCTION        shift and go to state 21

    termino                        shift and go to state 65
    creacionfunciones              shift and go to state 66

state 23

    (27) returnvalores -> empty .

    CLOSE           reduce using rule 27 (returnvalores -> empty .)
    RCORCHET        reduce using rule 27 (returnvalores -> empty .)
    $end            reduce using rule 27 (returnvalores -> empty .)
    ELSE            reduce using rule 27 (returnvalores -> empty .)


state 24

    (88) print -> funcion_print . LPAREN argument RPAREN END
    (89) print -> funcion_print . argument END
    (92) argument -> . ID
    (93) argument -> . TEXT

    LPAREN          shift and go to state 70
    ID              shift and go to state 72
    TEXT            shift and go to state 73

    argument                       shift and go to state 71

state 25

    (90) print -> ECHO . LPAREN valores_echo RPAREN END
    (91) print -> ECHO . valores_echo END
    (97) funcion_print -> ECHO .
    (94) valores_echo -> . argument COMA valores_echo
    (95) valores_echo -> . argument
    (92) argument -> . ID
    (93) argument -> . TEXT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
    LPAREN          shift and go to state 74
    ID              shift and go to state 72
    TEXT            shift and go to state 73

  ! LPAREN          [ reduce using rule 97 (funcion_print -> ECHO .) ]
  ! ID              [ reduce using rule 97 (funcion_print -> ECHO .) ]
  ! TEXT            [ reduce using rule 97 (funcion_print -> ECHO .) ]

    valores_echo                   shift and go to state 75
    argument                       shift and go to state 76

state 26

    (101) arreglos -> funcion_arreglo . LPAREN ID RPAREN

    LPAREN          shift and go to state 77


state 27

    (50) while -> WHILE . LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET

    LPAREN          shift and go to state 78


state 28

    (51) foreach -> FOREACH . LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET

    LPAREN          shift and go to state 79


state 29

    (130) clase -> CLASS . FNOMBRE LCORCHET declaracion RCORCHET

    FNOMBRE         shift and go to state 80


state 30

    (45) funcion_condicion -> IF .

    LPAREN          reduce using rule 45 (funcion_condicion -> IF .)


state 31

    (46) funcion_condicion -> ELSEIF .

    LPAREN          reduce using rule 46 (funcion_condicion -> ELSEIF .)


state 32

    (96) funcion_print -> VAR_EXPORT .

    LPAREN          reduce using rule 96 (funcion_print -> VAR_EXPORT .)
    ID              reduce using rule 96 (funcion_print -> VAR_EXPORT .)
    TEXT            reduce using rule 96 (funcion_print -> VAR_EXPORT .)


state 33

    (98) funcion_print -> PRINT .

    LPAREN          reduce using rule 98 (funcion_print -> PRINT .)
    ID              reduce using rule 98 (funcion_print -> PRINT .)
    TEXT            reduce using rule 98 (funcion_print -> PRINT .)


state 34

    (99) funcion_print -> PRINT_R .

    LPAREN          reduce using rule 99 (funcion_print -> PRINT_R .)
    ID              reduce using rule 99 (funcion_print -> PRINT_R .)
    TEXT            reduce using rule 99 (funcion_print -> PRINT_R .)


state 35

    (100) funcion_print -> VAR_DUMP .

    LPAREN          reduce using rule 100 (funcion_print -> VAR_DUMP .)
    ID              reduce using rule 100 (funcion_print -> VAR_DUMP .)
    TEXT            reduce using rule 100 (funcion_print -> VAR_DUMP .)


state 36

    (102) funcion_arreglo -> SUFFLE .

    LPAREN          reduce using rule 102 (funcion_arreglo -> SUFFLE .)


state 37

    (103) funcion_arreglo -> ARRAY_MERGE .

    LPAREN          reduce using rule 103 (funcion_arreglo -> ARRAY_MERGE .)


state 38

    (104) funcion_arreglo -> ARRAY_SEARCH .

    LPAREN          reduce using rule 104 (funcion_arreglo -> ARRAY_SEARCH .)


state 39

    (105) funcion_arreglo -> ARRAY_RAND .

    LPAREN          reduce using rule 105 (funcion_arreglo -> ARRAY_RAND .)


state 40

    (106) funcion_arreglo -> ARRAY_CHUNK .

    LPAREN          reduce using rule 106 (funcion_arreglo -> ARRAY_CHUNK .)


state 41

    (107) funcion_arreglo -> STR_SPLIT .

    LPAREN          reduce using rule 107 (funcion_arreglo -> STR_SPLIT .)


state 42

    (108) funcion_arreglo -> PREG_SPLIT .

    LPAREN          reduce using rule 108 (funcion_arreglo -> PREG_SPLIT .)


state 43

    (109) funcion_arreglo -> ARRAY_UNIQUE .

    LPAREN          reduce using rule 109 (funcion_arreglo -> ARRAY_UNIQUE .)


state 44

    (110) funcion_arreglo -> COUNT .

    LPAREN          reduce using rule 110 (funcion_arreglo -> COUNT .)


state 45

    (111) funcion_arreglo -> SIZEOF .

    LPAREN          reduce using rule 111 (funcion_arreglo -> SIZEOF .)


state 46

    (112) funcion_arreglo -> ARRAY_PUSH .

    LPAREN          reduce using rule 112 (funcion_arreglo -> ARRAY_PUSH .)


state 47

    (113) funcion_arreglo -> SORT .

    LPAREN          reduce using rule 113 (funcion_arreglo -> SORT .)


state 48

    (114) funcion_arreglo -> ASORT .

    LPAREN          reduce using rule 114 (funcion_arreglo -> ASORT .)


state 49

    (115) funcion_arreglo -> KSORT .

    LPAREN          reduce using rule 115 (funcion_arreglo -> KSORT .)


state 50

    (116) funcion_arreglo -> UNSET .

    LPAREN          reduce using rule 116 (funcion_arreglo -> UNSET .)


state 51

    (117) funcion_arreglo -> IMPLODE .

    LPAREN          reduce using rule 117 (funcion_arreglo -> IMPLODE .)


state 52

    (118) funcion_arreglo -> EXPLODE .

    LPAREN          reduce using rule 118 (funcion_arreglo -> EXPLODE .)


state 53

    (1) programa -> OPEN declaracion . CLOSE
    (2) programa -> OPEN declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for CLOSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    CLOSE           shift and go to state 81
    $end            reduce using rule 2 (programa -> OPEN declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 55

  ! CLOSE           [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! $end            [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! CLOSE           [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! $end            [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 54

    (3) programa -> declaracion CLOSE .

    $end            reduce using rule 3 (programa -> declaracion CLOSE .)


state 55

    (41) expif -> declaracion RCORCHET .

    CLOSE           reduce using rule 41 (expif -> declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    $end            reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)


state 56

    (44) expelse -> expif ELSE . LCORCHET declaracion RCORCHET

    LCORCHET        shift and go to state 82


state 57

    (28) expression -> ID EQUALS . operacion_matematica END
    (67) declararvariable -> ID EQUALS . tipo END
    (77) operador_object -> ID EQUALS . OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (29) operacion_matematica -> . termino operadores operacion_matematica
    (30) operacion_matematica -> . termino operadores termino
    (68) tipo -> . boolean
    (69) tipo -> . NUMBER
    (70) tipo -> . TEXT
    (71) tipo -> . NULL
    (72) tipo -> . archivos
    (73) tipo -> . array
    (74) tipo -> . new
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE
    (119) archivos -> . funcion_archivo LPAREN TEXT COMA TEXT RPAREN
    (78) array -> . ARRAY LPAREN valores_array RPAREN
    (87) new -> . NEW FNOMBRE
    (120) funcion_archivo -> . FGETS
    (121) funcion_archivo -> . FREAD
    (122) funcion_archivo -> . FSCANF
    (123) funcion_archivo -> . FPASSTHRU
    (124) funcion_archivo -> . FGETCSV
    (125) funcion_archivo -> . FGETC
    (126) funcion_archivo -> . FILE_GET_CONTENTS
    (127) funcion_archivo -> . READFILE
    (128) funcion_archivo -> . FILE
    (129) funcion_archivo -> . PARSE_INI_FILE

    OBJECT_OPERATOR shift and go to state 85
    NUMBER          shift and go to state 88
    TEXT            shift and go to state 89
    NULL            shift and go to state 90
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    ARRAY           shift and go to state 97
    NEW             shift and go to state 98
    FGETS           shift and go to state 99
    FREAD           shift and go to state 100
    FSCANF          shift and go to state 101
    FPASSTHRU       shift and go to state 102
    FGETCSV         shift and go to state 103
    FGETC           shift and go to state 104
    FILE_GET_CONTENTS shift and go to state 105
    READFILE        shift and go to state 106
    FILE            shift and go to state 107
    PARSE_INI_FILE  shift and go to state 108

    operacion_matematica           shift and go to state 83
    tipo                           shift and go to state 84
    termino                        shift and go to state 86
    boolean                        shift and go to state 87
    archivos                       shift and go to state 91
    array                          shift and go to state 92
    new                            shift and go to state 93
    funcion_archivo                shift and go to state 96

state 58

    (62) expresionlogica -> ID operadorlogico . ID

    ID              shift and go to state 109


state 59

    (63) operadorlogico -> AND .

    ID              reduce using rule 63 (operadorlogico -> AND .)


state 60

    (64) operadorlogico -> OR .

    ID              reduce using rule 64 (operadorlogico -> OR .)


state 61

    (65) operadorlogico -> XOR .

    ID              reduce using rule 65 (operadorlogico -> XOR .)


state 62

    (66) operadorlogico -> NOT .

    ID              reduce using rule 66 (operadorlogico -> NOT .)


state 63

    (39) expif -> funcion_condicion LPAREN . comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN . comparacion RPAREN LCORCHET
    (52) comparacion -> . termino operadorcomparacion termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 67
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69

    comparacion                    shift and go to state 110
    termino                        shift and go to state 111

state 64

    (21) creacionfunciones -> FUNCTION FNOMBRE . LPAREN RPAREN LCORCHET declaracion RCORCHET

    LPAREN          shift and go to state 112


state 65

    (25) returnvalores -> RETURN termino . END

    END             shift and go to state 113


state 66

    (26) returnvalores -> RETURN creacionfunciones .

    CLOSE           reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    RCORCHET        reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    $end            reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    ELSE            reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)


state 67

    (36) termino -> NUMBER .

    END             reduce using rule 36 (termino -> NUMBER .)
    IS_EQUAL        reduce using rule 36 (termino -> NUMBER .)
    IS_IDENTICAL    reduce using rule 36 (termino -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 36 (termino -> NUMBER .)
    IS_NOT_IDENTICAL reduce using rule 36 (termino -> NUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (termino -> NUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (termino -> NUMBER .)
    SPACESHIP       reduce using rule 36 (termino -> NUMBER .)
    MAYORQUE        reduce using rule 36 (termino -> NUMBER .)
    MENORQUE        reduce using rule 36 (termino -> NUMBER .)
    PLUS            reduce using rule 36 (termino -> NUMBER .)
    MINUS           reduce using rule 36 (termino -> NUMBER .)
    DIVIDE          reduce using rule 36 (termino -> NUMBER .)
    TIMES           reduce using rule 36 (termino -> NUMBER .)
    MODULO          reduce using rule 36 (termino -> NUMBER .)
    RPAREN          reduce using rule 36 (termino -> NUMBER .)


state 68

    (37) termino -> ID .

    END             reduce using rule 37 (termino -> ID .)
    PLUS            reduce using rule 37 (termino -> ID .)
    MINUS           reduce using rule 37 (termino -> ID .)
    DIVIDE          reduce using rule 37 (termino -> ID .)
    TIMES           reduce using rule 37 (termino -> ID .)
    MODULO          reduce using rule 37 (termino -> ID .)
    IS_EQUAL        reduce using rule 37 (termino -> ID .)
    IS_IDENTICAL    reduce using rule 37 (termino -> ID .)
    IS_NOT_EQUAL    reduce using rule 37 (termino -> ID .)
    IS_NOT_IDENTICAL reduce using rule 37 (termino -> ID .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (termino -> ID .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (termino -> ID .)
    SPACESHIP       reduce using rule 37 (termino -> ID .)
    MAYORQUE        reduce using rule 37 (termino -> ID .)
    MENORQUE        reduce using rule 37 (termino -> ID .)
    RPAREN          reduce using rule 37 (termino -> ID .)


state 69

    (38) termino -> DECIMAL .

    END             reduce using rule 38 (termino -> DECIMAL .)
    PLUS            reduce using rule 38 (termino -> DECIMAL .)
    MINUS           reduce using rule 38 (termino -> DECIMAL .)
    DIVIDE          reduce using rule 38 (termino -> DECIMAL .)
    TIMES           reduce using rule 38 (termino -> DECIMAL .)
    MODULO          reduce using rule 38 (termino -> DECIMAL .)
    IS_EQUAL        reduce using rule 38 (termino -> DECIMAL .)
    IS_IDENTICAL    reduce using rule 38 (termino -> DECIMAL .)
    IS_NOT_EQUAL    reduce using rule 38 (termino -> DECIMAL .)
    IS_NOT_IDENTICAL reduce using rule 38 (termino -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (termino -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (termino -> DECIMAL .)
    SPACESHIP       reduce using rule 38 (termino -> DECIMAL .)
    MAYORQUE        reduce using rule 38 (termino -> DECIMAL .)
    MENORQUE        reduce using rule 38 (termino -> DECIMAL .)
    RPAREN          reduce using rule 38 (termino -> DECIMAL .)


state 70

    (88) print -> funcion_print LPAREN . argument RPAREN END
    (92) argument -> . ID
    (93) argument -> . TEXT

    ID              shift and go to state 72
    TEXT            shift and go to state 73

    argument                       shift and go to state 114

state 71

    (89) print -> funcion_print argument . END

    END             shift and go to state 115


state 72

    (92) argument -> ID .

    END             reduce using rule 92 (argument -> ID .)
    COMA            reduce using rule 92 (argument -> ID .)
    RPAREN          reduce using rule 92 (argument -> ID .)


state 73

    (93) argument -> TEXT .

    END             reduce using rule 93 (argument -> TEXT .)
    COMA            reduce using rule 93 (argument -> TEXT .)
    RPAREN          reduce using rule 93 (argument -> TEXT .)


state 74

    (90) print -> ECHO LPAREN . valores_echo RPAREN END
    (94) valores_echo -> . argument COMA valores_echo
    (95) valores_echo -> . argument
    (92) argument -> . ID
    (93) argument -> . TEXT

    ID              shift and go to state 72
    TEXT            shift and go to state 73

    valores_echo                   shift and go to state 116
    argument                       shift and go to state 76

state 75

    (91) print -> ECHO valores_echo . END

    END             shift and go to state 117


state 76

    (94) valores_echo -> argument . COMA valores_echo
    (95) valores_echo -> argument .

    COMA            shift and go to state 118
    END             reduce using rule 95 (valores_echo -> argument .)
    RPAREN          reduce using rule 95 (valores_echo -> argument .)


state 77

    (101) arreglos -> funcion_arreglo LPAREN . ID RPAREN

    ID              shift and go to state 119


state 78

    (50) while -> WHILE LPAREN . comparacion RPAREN LCORCHET control_bucle RCORCHET
    (52) comparacion -> . termino operadorcomparacion termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 67
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69

    comparacion                    shift and go to state 120
    termino                        shift and go to state 111

state 79

    (51) foreach -> FOREACH LPAREN . ID AS ID RPAREN LCORCHET control_bucle RCORCHET

    ID              shift and go to state 121


state 80

    (130) clase -> CLASS FNOMBRE . LCORCHET declaracion RCORCHET

    LCORCHET        shift and go to state 122


state 81

    (1) programa -> OPEN declaracion CLOSE .

    $end            reduce using rule 1 (programa -> OPEN declaracion CLOSE .)


state 82

    (44) expelse -> expif ELSE LCORCHET . declaracion RCORCHET
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    expif                          shift and go to state 6
    declaracion                    shift and go to state 123
    expression                     shift and go to state 5
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 83

    (28) expression -> ID EQUALS operacion_matematica . END

    END             shift and go to state 124


state 84

    (67) declararvariable -> ID EQUALS tipo . END

    END             shift and go to state 125


state 85

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR . FNOMBRE LPAREN argumentos RPAREN END

    FNOMBRE         shift and go to state 126


state 86

    (29) operacion_matematica -> termino . operadores operacion_matematica
    (30) operacion_matematica -> termino . operadores termino
    (31) operadores -> . PLUS
    (32) operadores -> . MINUS
    (33) operadores -> . DIVIDE
    (34) operadores -> . TIMES
    (35) operadores -> . MODULO

    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    DIVIDE          shift and go to state 130
    TIMES           shift and go to state 131
    MODULO          shift and go to state 132

    operadores                     shift and go to state 127

state 87

    (68) tipo -> boolean .

    END             reduce using rule 68 (tipo -> boolean .)


state 88

    (69) tipo -> NUMBER .
    (36) termino -> NUMBER .

    END             reduce using rule 69 (tipo -> NUMBER .)
    PLUS            reduce using rule 36 (termino -> NUMBER .)
    MINUS           reduce using rule 36 (termino -> NUMBER .)
    DIVIDE          reduce using rule 36 (termino -> NUMBER .)
    TIMES           reduce using rule 36 (termino -> NUMBER .)
    MODULO          reduce using rule 36 (termino -> NUMBER .)


state 89

    (70) tipo -> TEXT .

    END             reduce using rule 70 (tipo -> TEXT .)


state 90

    (71) tipo -> NULL .

    END             reduce using rule 71 (tipo -> NULL .)


state 91

    (72) tipo -> archivos .

    END             reduce using rule 72 (tipo -> archivos .)


state 92

    (73) tipo -> array .

    END             reduce using rule 73 (tipo -> array .)


state 93

    (74) tipo -> new .

    END             reduce using rule 74 (tipo -> new .)


state 94

    (75) boolean -> TRUE .

    END             reduce using rule 75 (boolean -> TRUE .)
    COMA            reduce using rule 75 (boolean -> TRUE .)
    RPAREN          reduce using rule 75 (boolean -> TRUE .)


state 95

    (76) boolean -> FALSE .

    END             reduce using rule 76 (boolean -> FALSE .)
    COMA            reduce using rule 76 (boolean -> FALSE .)
    RPAREN          reduce using rule 76 (boolean -> FALSE .)


state 96

    (119) archivos -> funcion_archivo . LPAREN TEXT COMA TEXT RPAREN

    LPAREN          shift and go to state 133


state 97

    (78) array -> ARRAY . LPAREN valores_array RPAREN

    LPAREN          shift and go to state 134


state 98

    (87) new -> NEW . FNOMBRE

    FNOMBRE         shift and go to state 135


state 99

    (120) funcion_archivo -> FGETS .

    LPAREN          reduce using rule 120 (funcion_archivo -> FGETS .)


state 100

    (121) funcion_archivo -> FREAD .

    LPAREN          reduce using rule 121 (funcion_archivo -> FREAD .)


state 101

    (122) funcion_archivo -> FSCANF .

    LPAREN          reduce using rule 122 (funcion_archivo -> FSCANF .)


state 102

    (123) funcion_archivo -> FPASSTHRU .

    LPAREN          reduce using rule 123 (funcion_archivo -> FPASSTHRU .)


state 103

    (124) funcion_archivo -> FGETCSV .

    LPAREN          reduce using rule 124 (funcion_archivo -> FGETCSV .)


state 104

    (125) funcion_archivo -> FGETC .

    LPAREN          reduce using rule 125 (funcion_archivo -> FGETC .)


state 105

    (126) funcion_archivo -> FILE_GET_CONTENTS .

    LPAREN          reduce using rule 126 (funcion_archivo -> FILE_GET_CONTENTS .)


state 106

    (127) funcion_archivo -> READFILE .

    LPAREN          reduce using rule 127 (funcion_archivo -> READFILE .)


state 107

    (128) funcion_archivo -> FILE .

    LPAREN          reduce using rule 128 (funcion_archivo -> FILE .)


state 108

    (129) funcion_archivo -> PARSE_INI_FILE .

    LPAREN          reduce using rule 129 (funcion_archivo -> PARSE_INI_FILE .)


state 109

    (62) expresionlogica -> ID operadorlogico ID .

    CLOSE           reduce using rule 62 (expresionlogica -> ID operadorlogico ID .)
    RCORCHET        reduce using rule 62 (expresionlogica -> ID operadorlogico ID .)
    $end            reduce using rule 62 (expresionlogica -> ID operadorlogico ID .)
    ELSE            reduce using rule 62 (expresionlogica -> ID operadorlogico ID .)


state 110

    (39) expif -> funcion_condicion LPAREN comparacion . RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion . RPAREN LCORCHET

    RPAREN          shift and go to state 136


state 111

    (52) comparacion -> termino . operadorcomparacion termino
    (53) operadorcomparacion -> . IS_EQUAL
    (54) operadorcomparacion -> . IS_IDENTICAL
    (55) operadorcomparacion -> . IS_NOT_EQUAL
    (56) operadorcomparacion -> . IS_NOT_IDENTICAL
    (57) operadorcomparacion -> . IS_GREATER_OR_EQUAL
    (58) operadorcomparacion -> . IS_SMALLER_OR_EQUAL
    (59) operadorcomparacion -> . SPACESHIP
    (60) operadorcomparacion -> . MAYORQUE
    (61) operadorcomparacion -> . MENORQUE

    IS_EQUAL        shift and go to state 138
    IS_IDENTICAL    shift and go to state 139
    IS_NOT_EQUAL    shift and go to state 140
    IS_NOT_IDENTICAL shift and go to state 141
    IS_GREATER_OR_EQUAL shift and go to state 142
    IS_SMALLER_OR_EQUAL shift and go to state 143
    SPACESHIP       shift and go to state 144
    MAYORQUE        shift and go to state 145
    MENORQUE        shift and go to state 146

    operadorcomparacion            shift and go to state 137

state 112

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN . RPAREN LCORCHET declaracion RCORCHET

    RPAREN          shift and go to state 147


state 113

    (25) returnvalores -> RETURN termino END .

    CLOSE           reduce using rule 25 (returnvalores -> RETURN termino END .)
    RCORCHET        reduce using rule 25 (returnvalores -> RETURN termino END .)
    $end            reduce using rule 25 (returnvalores -> RETURN termino END .)
    ELSE            reduce using rule 25 (returnvalores -> RETURN termino END .)


state 114

    (88) print -> funcion_print LPAREN argument . RPAREN END

    RPAREN          shift and go to state 148


state 115

    (89) print -> funcion_print argument END .

    CLOSE           reduce using rule 89 (print -> funcion_print argument END .)
    RCORCHET        reduce using rule 89 (print -> funcion_print argument END .)
    $end            reduce using rule 89 (print -> funcion_print argument END .)
    ELSE            reduce using rule 89 (print -> funcion_print argument END .)


state 116

    (90) print -> ECHO LPAREN valores_echo . RPAREN END

    RPAREN          shift and go to state 149


state 117

    (91) print -> ECHO valores_echo END .

    CLOSE           reduce using rule 91 (print -> ECHO valores_echo END .)
    RCORCHET        reduce using rule 91 (print -> ECHO valores_echo END .)
    $end            reduce using rule 91 (print -> ECHO valores_echo END .)
    ELSE            reduce using rule 91 (print -> ECHO valores_echo END .)


state 118

    (94) valores_echo -> argument COMA . valores_echo
    (94) valores_echo -> . argument COMA valores_echo
    (95) valores_echo -> . argument
    (92) argument -> . ID
    (93) argument -> . TEXT

    ID              shift and go to state 72
    TEXT            shift and go to state 73

    argument                       shift and go to state 76
    valores_echo                   shift and go to state 150

state 119

    (101) arreglos -> funcion_arreglo LPAREN ID . RPAREN

    RPAREN          shift and go to state 151


state 120

    (50) while -> WHILE LPAREN comparacion . RPAREN LCORCHET control_bucle RCORCHET

    RPAREN          shift and go to state 152


state 121

    (51) foreach -> FOREACH LPAREN ID . AS ID RPAREN LCORCHET control_bucle RCORCHET

    AS              shift and go to state 153


state 122

    (130) clase -> CLASS FNOMBRE LCORCHET . declaracion RCORCHET
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 154
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 123

    (44) expelse -> expif ELSE LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 155
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 124

    (28) expression -> ID EQUALS operacion_matematica END .

    CLOSE           reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    RCORCHET        reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    $end            reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    ELSE            reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)


state 125

    (67) declararvariable -> ID EQUALS tipo END .

    CLOSE           reduce using rule 67 (declararvariable -> ID EQUALS tipo END .)
    RCORCHET        reduce using rule 67 (declararvariable -> ID EQUALS tipo END .)
    $end            reduce using rule 67 (declararvariable -> ID EQUALS tipo END .)
    ELSE            reduce using rule 67 (declararvariable -> ID EQUALS tipo END .)


state 126

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE . LPAREN argumentos RPAREN END

    LPAREN          shift and go to state 156


state 127

    (29) operacion_matematica -> termino operadores . operacion_matematica
    (30) operacion_matematica -> termino operadores . termino
    (29) operacion_matematica -> . termino operadores operacion_matematica
    (30) operacion_matematica -> . termino operadores termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 67
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69

    termino                        shift and go to state 157
    operacion_matematica           shift and go to state 158

state 128

    (31) operadores -> PLUS .

    NUMBER          reduce using rule 31 (operadores -> PLUS .)
    ID              reduce using rule 31 (operadores -> PLUS .)
    DECIMAL         reduce using rule 31 (operadores -> PLUS .)


state 129

    (32) operadores -> MINUS .

    NUMBER          reduce using rule 32 (operadores -> MINUS .)
    ID              reduce using rule 32 (operadores -> MINUS .)
    DECIMAL         reduce using rule 32 (operadores -> MINUS .)


state 130

    (33) operadores -> DIVIDE .

    NUMBER          reduce using rule 33 (operadores -> DIVIDE .)
    ID              reduce using rule 33 (operadores -> DIVIDE .)
    DECIMAL         reduce using rule 33 (operadores -> DIVIDE .)


state 131

    (34) operadores -> TIMES .

    NUMBER          reduce using rule 34 (operadores -> TIMES .)
    ID              reduce using rule 34 (operadores -> TIMES .)
    DECIMAL         reduce using rule 34 (operadores -> TIMES .)


state 132

    (35) operadores -> MODULO .

    NUMBER          reduce using rule 35 (operadores -> MODULO .)
    ID              reduce using rule 35 (operadores -> MODULO .)
    DECIMAL         reduce using rule 35 (operadores -> MODULO .)


state 133

    (119) archivos -> funcion_archivo LPAREN . TEXT COMA TEXT RPAREN

    TEXT            shift and go to state 159


state 134

    (78) array -> ARRAY LPAREN . valores_array RPAREN
    (79) valores_array -> . elementos_array COMA valores_array
    (80) valores_array -> . elementos_array
    (81) valores_array -> . empty
    (82) elementos_array -> . NUMBER
    (83) elementos_array -> . TEXT
    (84) elementos_array -> . empty
    (85) elementos_array -> . boolean
    (86) elementos_array -> . array
    (22) empty -> .
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE
    (78) array -> . ARRAY LPAREN valores_array RPAREN

    NUMBER          shift and go to state 163
    TEXT            shift and go to state 164
    RPAREN          reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    ARRAY           shift and go to state 97

    valores_array                  shift and go to state 160
    elementos_array                shift and go to state 161
    empty                          shift and go to state 162
    boolean                        shift and go to state 165
    array                          shift and go to state 166

state 135

    (87) new -> NEW FNOMBRE .

    END             reduce using rule 87 (new -> NEW FNOMBRE .)


state 136

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN . LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion RPAREN . LCORCHET

    LCORCHET        shift and go to state 167


state 137

    (52) comparacion -> termino operadorcomparacion . termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 67
    ID              shift and go to state 68
    DECIMAL         shift and go to state 69

    termino                        shift and go to state 168

state 138

    (53) operadorcomparacion -> IS_EQUAL .

    NUMBER          reduce using rule 53 (operadorcomparacion -> IS_EQUAL .)
    ID              reduce using rule 53 (operadorcomparacion -> IS_EQUAL .)
    DECIMAL         reduce using rule 53 (operadorcomparacion -> IS_EQUAL .)


state 139

    (54) operadorcomparacion -> IS_IDENTICAL .

    NUMBER          reduce using rule 54 (operadorcomparacion -> IS_IDENTICAL .)
    ID              reduce using rule 54 (operadorcomparacion -> IS_IDENTICAL .)
    DECIMAL         reduce using rule 54 (operadorcomparacion -> IS_IDENTICAL .)


state 140

    (55) operadorcomparacion -> IS_NOT_EQUAL .

    NUMBER          reduce using rule 55 (operadorcomparacion -> IS_NOT_EQUAL .)
    ID              reduce using rule 55 (operadorcomparacion -> IS_NOT_EQUAL .)
    DECIMAL         reduce using rule 55 (operadorcomparacion -> IS_NOT_EQUAL .)


state 141

    (56) operadorcomparacion -> IS_NOT_IDENTICAL .

    NUMBER          reduce using rule 56 (operadorcomparacion -> IS_NOT_IDENTICAL .)
    ID              reduce using rule 56 (operadorcomparacion -> IS_NOT_IDENTICAL .)
    DECIMAL         reduce using rule 56 (operadorcomparacion -> IS_NOT_IDENTICAL .)


state 142

    (57) operadorcomparacion -> IS_GREATER_OR_EQUAL .

    NUMBER          reduce using rule 57 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)
    ID              reduce using rule 57 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 57 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)


state 143

    (58) operadorcomparacion -> IS_SMALLER_OR_EQUAL .

    NUMBER          reduce using rule 58 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)
    ID              reduce using rule 58 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 58 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)


state 144

    (59) operadorcomparacion -> SPACESHIP .

    NUMBER          reduce using rule 59 (operadorcomparacion -> SPACESHIP .)
    ID              reduce using rule 59 (operadorcomparacion -> SPACESHIP .)
    DECIMAL         reduce using rule 59 (operadorcomparacion -> SPACESHIP .)


state 145

    (60) operadorcomparacion -> MAYORQUE .

    NUMBER          reduce using rule 60 (operadorcomparacion -> MAYORQUE .)
    ID              reduce using rule 60 (operadorcomparacion -> MAYORQUE .)
    DECIMAL         reduce using rule 60 (operadorcomparacion -> MAYORQUE .)


state 146

    (61) operadorcomparacion -> MENORQUE .

    NUMBER          reduce using rule 61 (operadorcomparacion -> MENORQUE .)
    ID              reduce using rule 61 (operadorcomparacion -> MENORQUE .)
    DECIMAL         reduce using rule 61 (operadorcomparacion -> MENORQUE .)


state 147

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN . LCORCHET declaracion RCORCHET

    LCORCHET        shift and go to state 169


state 148

    (88) print -> funcion_print LPAREN argument RPAREN . END

    END             shift and go to state 170


state 149

    (90) print -> ECHO LPAREN valores_echo RPAREN . END

    END             shift and go to state 171


state 150

    (94) valores_echo -> argument COMA valores_echo .

    END             reduce using rule 94 (valores_echo -> argument COMA valores_echo .)
    RPAREN          reduce using rule 94 (valores_echo -> argument COMA valores_echo .)


state 151

    (101) arreglos -> funcion_arreglo LPAREN ID RPAREN .

    CLOSE           reduce using rule 101 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    RCORCHET        reduce using rule 101 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    $end            reduce using rule 101 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    ELSE            reduce using rule 101 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)


state 152

    (50) while -> WHILE LPAREN comparacion RPAREN . LCORCHET control_bucle RCORCHET

    LCORCHET        shift and go to state 172


state 153

    (51) foreach -> FOREACH LPAREN ID AS . ID RPAREN LCORCHET control_bucle RCORCHET

    ID              shift and go to state 173


state 154

    (130) clase -> CLASS FNOMBRE LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 174
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 155

    (44) expelse -> expif ELSE LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]


state 156

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN . argumentos RPAREN END
    (23) argumentos -> . ID
    (24) argumentos -> . empty
    (22) empty -> .

    ID              shift and go to state 175
    RPAREN          reduce using rule 22 (empty -> .)

    argumentos                     shift and go to state 176
    empty                          shift and go to state 177

state 157

    (30) operacion_matematica -> termino operadores termino .
    (29) operacion_matematica -> termino . operadores operacion_matematica
    (30) operacion_matematica -> termino . operadores termino
    (31) operadores -> . PLUS
    (32) operadores -> . MINUS
    (33) operadores -> . DIVIDE
    (34) operadores -> . TIMES
    (35) operadores -> . MODULO

    END             reduce using rule 30 (operacion_matematica -> termino operadores termino .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    DIVIDE          shift and go to state 130
    TIMES           shift and go to state 131
    MODULO          shift and go to state 132

    operadores                     shift and go to state 127

state 158

    (29) operacion_matematica -> termino operadores operacion_matematica .

    END             reduce using rule 29 (operacion_matematica -> termino operadores operacion_matematica .)


state 159

    (119) archivos -> funcion_archivo LPAREN TEXT . COMA TEXT RPAREN

    COMA            shift and go to state 178


state 160

    (78) array -> ARRAY LPAREN valores_array . RPAREN

    RPAREN          shift and go to state 179


state 161

    (79) valores_array -> elementos_array . COMA valores_array
    (80) valores_array -> elementos_array .

    COMA            shift and go to state 180
    RPAREN          reduce using rule 80 (valores_array -> elementos_array .)


state 162

    (81) valores_array -> empty .
    (84) elementos_array -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 81 (valores_array -> empty .)
    RPAREN          reduce using rule 81 (valores_array -> empty .)
    COMA            reduce using rule 84 (elementos_array -> empty .)

  ! RPAREN          [ reduce using rule 84 (elementos_array -> empty .) ]


state 163

    (82) elementos_array -> NUMBER .

    COMA            reduce using rule 82 (elementos_array -> NUMBER .)
    RPAREN          reduce using rule 82 (elementos_array -> NUMBER .)


state 164

    (83) elementos_array -> TEXT .

    COMA            reduce using rule 83 (elementos_array -> TEXT .)
    RPAREN          reduce using rule 83 (elementos_array -> TEXT .)


state 165

    (85) elementos_array -> boolean .

    COMA            reduce using rule 85 (elementos_array -> boolean .)
    RPAREN          reduce using rule 85 (elementos_array -> boolean .)


state 166

    (86) elementos_array -> array .

    COMA            reduce using rule 86 (elementos_array -> array .)
    RPAREN          reduce using rule 86 (elementos_array -> array .)


state 167

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET . declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    CLOSE           reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .)
    $end            reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .) ]
  ! ELSE            [ reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    funcion_condicion              shift and go to state 19
    declaracion                    shift and go to state 181
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 168

    (52) comparacion -> termino operadorcomparacion termino .

    RPAREN          reduce using rule 52 (comparacion -> termino operadorcomparacion termino .)


state 169

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET . declaracion RCORCHET
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 182
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 170

    (88) print -> funcion_print LPAREN argument RPAREN END .

    CLOSE           reduce using rule 88 (print -> funcion_print LPAREN argument RPAREN END .)
    RCORCHET        reduce using rule 88 (print -> funcion_print LPAREN argument RPAREN END .)
    $end            reduce using rule 88 (print -> funcion_print LPAREN argument RPAREN END .)
    ELSE            reduce using rule 88 (print -> funcion_print LPAREN argument RPAREN END .)


state 171

    (90) print -> ECHO LPAREN valores_echo RPAREN END .

    CLOSE           reduce using rule 90 (print -> ECHO LPAREN valores_echo RPAREN END .)
    RCORCHET        reduce using rule 90 (print -> ECHO LPAREN valores_echo RPAREN END .)
    $end            reduce using rule 90 (print -> ECHO LPAREN valores_echo RPAREN END .)
    ELSE            reduce using rule 90 (print -> ECHO LPAREN valores_echo RPAREN END .)


state 172

    (50) while -> WHILE LPAREN comparacion RPAREN LCORCHET . control_bucle RCORCHET
    (47) control_bucle -> . BREAK
    (48) control_bucle -> . CONTINUE
    (49) control_bucle -> . declaracion
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
    BREAK           shift and go to state 184
    CONTINUE        shift and go to state 185
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    control_bucle                  shift and go to state 183
    declaracion                    shift and go to state 186
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 173

    (51) foreach -> FOREACH LPAREN ID AS ID . RPAREN LCORCHET control_bucle RCORCHET

    RPAREN          shift and go to state 187


state 174

    (130) clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 130 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 130 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 130 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 130 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .) ]


state 175

    (23) argumentos -> ID .

    RPAREN          reduce using rule 23 (argumentos -> ID .)


state 176

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos . RPAREN END

    RPAREN          shift and go to state 188


state 177

    (24) argumentos -> empty .

    RPAREN          reduce using rule 24 (argumentos -> empty .)


state 178

    (119) archivos -> funcion_archivo LPAREN TEXT COMA . TEXT RPAREN

    TEXT            shift and go to state 189


state 179

    (78) array -> ARRAY LPAREN valores_array RPAREN .

    END             reduce using rule 78 (array -> ARRAY LPAREN valores_array RPAREN .)
    COMA            reduce using rule 78 (array -> ARRAY LPAREN valores_array RPAREN .)
    RPAREN          reduce using rule 78 (array -> ARRAY LPAREN valores_array RPAREN .)


state 180

    (79) valores_array -> elementos_array COMA . valores_array
    (79) valores_array -> . elementos_array COMA valores_array
    (80) valores_array -> . elementos_array
    (81) valores_array -> . empty
    (82) elementos_array -> . NUMBER
    (83) elementos_array -> . TEXT
    (84) elementos_array -> . empty
    (85) elementos_array -> . boolean
    (86) elementos_array -> . array
    (22) empty -> .
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE
    (78) array -> . ARRAY LPAREN valores_array RPAREN

    NUMBER          shift and go to state 163
    TEXT            shift and go to state 164
    RPAREN          reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    ARRAY           shift and go to state 97

    elementos_array                shift and go to state 161
    valores_array                  shift and go to state 190
    empty                          shift and go to state 162
    boolean                        shift and go to state 165
    array                          shift and go to state 166

state 181

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 191
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 182

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 192
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 183

    (50) while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle . RCORCHET

    RCORCHET        shift and go to state 193


state 184

    (47) control_bucle -> BREAK .

    RCORCHET        reduce using rule 47 (control_bucle -> BREAK .)


state 185

    (48) control_bucle -> CONTINUE .

    RCORCHET        reduce using rule 48 (control_bucle -> CONTINUE .)


state 186

    (49) control_bucle -> declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .

  ! reduce/reduce conflict for RCORCHET resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 55

  ! RCORCHET        [ reduce using rule 49 (control_bucle -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]


state 187

    (51) foreach -> FOREACH LPAREN ID AS ID RPAREN . LCORCHET control_bucle RCORCHET

    LCORCHET        shift and go to state 194


state 188

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN . END

    END             shift and go to state 195


state 189

    (119) archivos -> funcion_archivo LPAREN TEXT COMA TEXT . RPAREN

    RPAREN          shift and go to state 196


state 190

    (79) valores_array -> elementos_array COMA valores_array .

    RPAREN          reduce using rule 79 (valores_array -> elementos_array COMA valores_array .)


state 191

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    CLOSE           reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    ELSE            reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]


state 192

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    CLOSE           reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    ELSE            reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]


state 193

    (50) while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .

    CLOSE           reduce using rule 50 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    RCORCHET        reduce using rule 50 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    $end            reduce using rule 50 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    ELSE            reduce using rule 50 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)


state 194

    (51) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET . control_bucle RCORCHET
    (47) control_bucle -> . BREAK
    (48) control_bucle -> . CONTINUE
    (49) control_bucle -> . declaracion
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (62) expresionlogica -> . ID operadorlogico ID
    (67) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (77) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (88) print -> . funcion_print LPAREN argument RPAREN END
    (89) print -> . funcion_print argument END
    (90) print -> . ECHO LPAREN valores_echo RPAREN END
    (91) print -> . ECHO valores_echo END
    (101) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (50) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (51) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET
    (130) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (45) funcion_condicion -> . IF
    (46) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (96) funcion_print -> . VAR_EXPORT
    (97) funcion_print -> . ECHO
    (98) funcion_print -> . PRINT
    (99) funcion_print -> . PRINT_R
    (100) funcion_print -> . VAR_DUMP
    (102) funcion_arreglo -> . SUFFLE
    (103) funcion_arreglo -> . ARRAY_MERGE
    (104) funcion_arreglo -> . ARRAY_SEARCH
    (105) funcion_arreglo -> . ARRAY_RAND
    (106) funcion_arreglo -> . ARRAY_CHUNK
    (107) funcion_arreglo -> . STR_SPLIT
    (108) funcion_arreglo -> . PREG_SPLIT
    (109) funcion_arreglo -> . ARRAY_UNIQUE
    (110) funcion_arreglo -> . COUNT
    (111) funcion_arreglo -> . SIZEOF
    (112) funcion_arreglo -> . ARRAY_PUSH
    (113) funcion_arreglo -> . SORT
    (114) funcion_arreglo -> . ASORT
    (115) funcion_arreglo -> . KSORT
    (116) funcion_arreglo -> . UNSET
    (117) funcion_arreglo -> . IMPLODE
    (118) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
    BREAK           shift and go to state 184
    CONTINUE        shift and go to state 185
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 28
    CLASS           shift and go to state 29
    IF              shift and go to state 30
    ELSEIF          shift and go to state 31
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 32
    PRINT           shift and go to state 33
    PRINT_R         shift and go to state 34
    VAR_DUMP        shift and go to state 35
    SUFFLE          shift and go to state 36
    ARRAY_MERGE     shift and go to state 37
    ARRAY_SEARCH    shift and go to state 38
    ARRAY_RAND      shift and go to state 39
    ARRAY_CHUNK     shift and go to state 40
    STR_SPLIT       shift and go to state 41
    PREG_SPLIT      shift and go to state 42
    ARRAY_UNIQUE    shift and go to state 43
    COUNT           shift and go to state 44
    SIZEOF          shift and go to state 45
    ARRAY_PUSH      shift and go to state 46
    SORT            shift and go to state 47
    ASORT           shift and go to state 48
    KSORT           shift and go to state 49
    UNSET           shift and go to state 50
    IMPLODE         shift and go to state 51
    EXPLODE         shift and go to state 52

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    control_bucle                  shift and go to state 197
    declaracion                    shift and go to state 186
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 195

    (77) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .

    CLOSE           reduce using rule 77 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    RCORCHET        reduce using rule 77 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    $end            reduce using rule 77 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    ELSE            reduce using rule 77 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)


state 196

    (119) archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN .

    END             reduce using rule 119 (archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN .)


state 197

    (51) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle . RCORCHET

    RCORCHET        shift and go to state 198


state 198

    (51) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET .

    CLOSE           reduce using rule 51 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET .)
    RCORCHET        reduce using rule 51 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET .)
    $end            reduce using rule 51 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET .)
    ELSE            reduce using rule 51 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET control_bucle RCORCHET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLOSE in state 0 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 0 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 6 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 25 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 53 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 53 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 53 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 53 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 82 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 122 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 123 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 123 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 154 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 154 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 167 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 167 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 169 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 172 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 181 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 181 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 182 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 182 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 194 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (programa -> OPEN)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (declaracion -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 53 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (declaracion -> declaracion) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (expif -> declaracion) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 53
WARNING: reduce/reduce conflict in state 123 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 123
WARNING: reduce/reduce conflict in state 154 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 154
WARNING: reduce/reduce conflict in state 155 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> expif ELSE LCORCHET declaracion RCORCHET) in state 155
WARNING: reduce/reduce conflict in state 162 resolved using rule (valores_array -> empty)
WARNING: rejected rule (elementos_array -> empty) in state 162
WARNING: reduce/reduce conflict in state 167 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET) in state 167
WARNING: reduce/reduce conflict in state 174 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET) in state 174
WARNING: reduce/reduce conflict in state 181 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 181
WARNING: reduce/reduce conflict in state 182 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 182
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 191 resolved using rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expif -> declaracion RCORCHET) in state 191
WARNING: reduce/reduce conflict in state 192 resolved using rule (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expif -> declaracion RCORCHET) in state 192
WARNING: Rule (expif -> declaracion) is never reduced
WARNING: Rule (control_bucle -> declaracion) is never reduced

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> OPEN declaracion CLOSE
Rule 2     programa -> OPEN declaracion
Rule 3     programa -> declaracion CLOSE
Rule 4     programa -> declaracion
Rule 5     programa -> CLOSE
Rule 6     programa -> OPEN
Rule 7     declaracion -> expression
Rule 8     declaracion -> expif
Rule 9     declaracion -> expelse
Rule 10    declaracion -> expresionlogica
Rule 11    declaracion -> declararvariable
Rule 12    declaracion -> creacionfunciones
Rule 13    declaracion -> returnvalores
Rule 14    declaracion -> operador_object
Rule 15    declaracion -> print
Rule 16    declaracion -> arreglos
Rule 17    declaracion -> while
Rule 18    declaracion -> foreach
Rule 19    declaracion -> clase
Rule 20    declaracion -> declaracion
Rule 21    creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
Rule 22    empty -> <empty>
Rule 23    argumentos -> ID
Rule 24    argumentos -> empty
Rule 25    returnvalores -> RETURN termino END
Rule 26    returnvalores -> RETURN creacionfunciones
Rule 27    returnvalores -> empty
Rule 28    expression -> ID EQUALS operacion_matematica END
Rule 29    operacion_matematica -> termino operadores operacion_matematica
Rule 30    operacion_matematica -> termino operadores termino
Rule 31    operadores -> PLUS
Rule 32    operadores -> MINUS
Rule 33    operadores -> DIVIDE
Rule 34    operadores -> TIMES
Rule 35    operadores -> MODULO
Rule 36    termino -> NUMBER
Rule 37    termino -> ID
Rule 38    termino -> DECIMAL
Rule 39    expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
Rule 40    expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET
Rule 41    expif -> declaracion RCORCHET
Rule 42    expif -> declaracion
Rule 43    expif -> RCORCHET
Rule 44    expelse -> expif ELSE LCORCHET declaracion RCORCHET
Rule 45    expelse -> expif ELSE LCORCHET declaracion
Rule 46    expelse -> expif ELSE LCORCHET
Rule 47    expelse -> declaracion
Rule 48    expelse -> declaracion RCORCHET
Rule 49    expelse -> RCORCHET
Rule 50    funcion_condicion -> IF
Rule 51    funcion_condicion -> ELSEIF
Rule 52    control_bucle -> declaracion
Rule 53    control_bucle -> BREAK
Rule 54    control_bucle -> CONTINUE
Rule 55    while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
Rule 56    while -> WHILE LPAREN comparacion RPAREN LCORCHET
Rule 57    while -> control_bucle RCORCHET
Rule 58    while -> control_bucle
Rule 59    while -> RCORCHET
Rule 60    foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
Rule 61    foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET
Rule 62    foreach -> control_bucle RCORCHET
Rule 63    foreach -> control_bucle
Rule 64    foreach -> RCORCHET
Rule 65    comparacion -> termino operadorcomparacion termino
Rule 66    operadorcomparacion -> IS_EQUAL
Rule 67    operadorcomparacion -> IS_IDENTICAL
Rule 68    operadorcomparacion -> IS_NOT_EQUAL
Rule 69    operadorcomparacion -> IS_NOT_IDENTICAL
Rule 70    operadorcomparacion -> IS_GREATER_OR_EQUAL
Rule 71    operadorcomparacion -> IS_SMALLER_OR_EQUAL
Rule 72    operadorcomparacion -> SPACESHIP
Rule 73    operadorcomparacion -> MAYORQUE
Rule 74    operadorcomparacion -> MENORQUE
Rule 75    expresionlogica -> ID operadorlogico ID
Rule 76    operadorlogico -> AND
Rule 77    operadorlogico -> OR
Rule 78    operadorlogico -> XOR
Rule 79    operadorlogico -> NOT
Rule 80    declararvariable -> ID EQUALS tipo END
Rule 81    tipo -> boolean
Rule 82    tipo -> NUMBER
Rule 83    tipo -> TEXT
Rule 84    tipo -> NULL
Rule 85    tipo -> archivos
Rule 86    tipo -> array
Rule 87    tipo -> new
Rule 88    boolean -> TRUE
Rule 89    boolean -> FALSE
Rule 90    operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
Rule 91    array -> ARRAY LPAREN valores_array RPAREN
Rule 92    valores_array -> elementos_array COMA valores_array
Rule 93    valores_array -> elementos_array
Rule 94    valores_array -> empty
Rule 95    elementos_array -> NUMBER
Rule 96    elementos_array -> TEXT
Rule 97    elementos_array -> empty
Rule 98    elementos_array -> boolean
Rule 99    elementos_array -> array
Rule 100   new -> NEW FNOMBRE
Rule 101   print -> funcion_print LPAREN argument RPAREN END
Rule 102   print -> funcion_print argument END
Rule 103   print -> ECHO LPAREN valores_echo RPAREN END
Rule 104   print -> ECHO valores_echo END
Rule 105   argument -> ID
Rule 106   argument -> TEXT
Rule 107   valores_echo -> argument COMA valores_echo
Rule 108   valores_echo -> argument
Rule 109   funcion_print -> VAR_EXPORT
Rule 110   funcion_print -> ECHO
Rule 111   funcion_print -> PRINT
Rule 112   funcion_print -> PRINT_R
Rule 113   funcion_print -> VAR_DUMP
Rule 114   arreglos -> funcion_arreglo LPAREN ID RPAREN
Rule 115   funcion_arreglo -> SUFFLE
Rule 116   funcion_arreglo -> ARRAY_MERGE
Rule 117   funcion_arreglo -> ARRAY_SEARCH
Rule 118   funcion_arreglo -> ARRAY_RAND
Rule 119   funcion_arreglo -> ARRAY_CHUNK
Rule 120   funcion_arreglo -> STR_SPLIT
Rule 121   funcion_arreglo -> PREG_SPLIT
Rule 122   funcion_arreglo -> ARRAY_UNIQUE
Rule 123   funcion_arreglo -> COUNT
Rule 124   funcion_arreglo -> SIZEOF
Rule 125   funcion_arreglo -> ARRAY_PUSH
Rule 126   funcion_arreglo -> SORT
Rule 127   funcion_arreglo -> ASORT
Rule 128   funcion_arreglo -> KSORT
Rule 129   funcion_arreglo -> UNSET
Rule 130   funcion_arreglo -> IMPLODE
Rule 131   funcion_arreglo -> EXPLODE
Rule 132   archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN
Rule 133   funcion_archivo -> FGETS
Rule 134   funcion_archivo -> FREAD
Rule 135   funcion_archivo -> FSCANF
Rule 136   funcion_archivo -> FPASSTHRU
Rule 137   funcion_archivo -> FGETCSV
Rule 138   funcion_archivo -> FGETC
Rule 139   funcion_archivo -> FILE_GET_CONTENTS
Rule 140   funcion_archivo -> READFILE
Rule 141   funcion_archivo -> FILE
Rule 142   funcion_archivo -> PARSE_INI_FILE
Rule 143   clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET
Rule 144   clase -> CLASS FNOMBRE LCORCHET
Rule 145   clase -> declaracion RCORCHET
Rule 146   clase -> declaracion
Rule 147   clase -> RCORCHET

Terminals, with rules where they appear

AND                  : 76
ARRAY                : 91
ARRAY_CHUNK          : 119
ARRAY_MERGE          : 116
ARRAY_PUSH           : 125
ARRAY_RAND           : 118
ARRAY_SEARCH         : 117
ARRAY_UNIQUE         : 122
AS                   : 60 61
ASORT                : 127
BREAK                : 53
CLASS                : 143 144
CLOSE                : 1 3 5
COMA                 : 92 107 132
CONTINUE             : 54
COUNT                : 123
DECIMAL              : 38
DIVIDE               : 33
ECHO                 : 103 104 110
ELSE                 : 44 45 46
ELSEIF               : 51
END                  : 25 28 80 90 101 102 103 104
EQUALS               : 28 80 90
EXPLODE              : 131
FALSE                : 89
FGETC                : 138
FGETCSV              : 137
FGETS                : 133
FILE                 : 141
FILE_GET_CONTENTS    : 139
FNOMBRE              : 21 90 100 143 144
FOREACH              : 60 61
FPASSTHRU            : 136
FREAD                : 134
FSCANF               : 135
FUNCTION             : 21
ID                   : 23 28 37 60 60 61 61 75 75 80 90 105 114
IF                   : 50
IMPLODE              : 130
IS_EQUAL             : 66
IS_GREATER_OR_EQUAL  : 70
IS_IDENTICAL         : 67
IS_NOT_EQUAL         : 68
IS_NOT_IDENTICAL     : 69
IS_SMALLER_OR_EQUAL  : 71
KSORT                : 128
LCORCHET             : 21 39 40 44 45 46 55 56 60 61 143 144
LPAREN               : 21 39 40 55 56 60 61 90 91 101 103 114 132
MAYORQUE             : 73
MENORQUE             : 74
MINUS                : 32
MODULO               : 35
NEW                  : 100
NOT                  : 79
NULL                 : 84
NUMBER               : 36 82 95
OBJECT_OPERATOR      : 90
OPEN                 : 1 2 6
OR                   : 77
PARSE_INI_FILE       : 142
PLUS                 : 31
PREG_SPLIT           : 121
PRINT                : 111
PRINT_R              : 112
RCORCHET             : 21 39 41 43 44 48 49 55 57 59 60 62 64 143 145 147
READFILE             : 140
RETURN               : 25 26
RPAREN               : 21 39 40 55 56 60 61 90 91 101 103 114 132
SIZEOF               : 124
SORT                 : 126
SPACESHIP            : 72
STR_SPLIT            : 120
SUFFLE               : 115
TEXT                 : 83 96 106 132 132
TIMES                : 34
TRUE                 : 88
UNSET                : 129
VAR_DUMP             : 113
VAR_EXPORT           : 109
WHILE                : 55 56
XOR                  : 78
error                : 

Nonterminals, with rules where they appear

archivos             : 85
argument             : 101 102 107 108
argumentos           : 90
array                : 86 99
arreglos             : 16
boolean              : 81 98
clase                : 19
comparacion          : 39 40 55 56
control_bucle        : 55 57 58 62 63
creacionfunciones    : 12 26
declaracion          : 1 2 3 4 20 21 39 41 42 44 45 47 48 52 60 143 145 146
declararvariable     : 11
elementos_array      : 92 93
empty                : 24 27 94 97
expelse              : 9
expif                : 8 44 45 46
expresionlogica      : 10
expression           : 7
foreach              : 18
funcion_archivo      : 132
funcion_arreglo      : 114
funcion_condicion    : 39 40
funcion_print        : 101 102
new                  : 87
operacion_matematica : 28 29
operador_object      : 14
operadorcomparacion  : 65
operadores           : 29 30
operadorlogico       : 75
print                : 15
programa             : 0
returnvalores        : 13
termino              : 25 29 30 30 65 65
tipo                 : 80
valores_array        : 91 92
valores_echo         : 103 104 107
while                : 17

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . OPEN declaracion CLOSE
    (2) programa -> . OPEN declaracion
    (3) programa -> . declaracion CLOSE
    (4) programa -> . declaracion
    (5) programa -> . CLOSE
    (6) programa -> . OPEN
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
    OPEN            shift and go to state 2
    CLOSE           shift and go to state 4
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    $end            reduce using rule 22 (empty -> .)
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! CLOSE           [ reduce using rule 22 (empty -> .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    programa                       shift and go to state 1
    declaracion                    shift and go to state 3
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 1

    (0) S' -> programa .



state 2

    (1) programa -> OPEN . declaracion CLOSE
    (2) programa -> OPEN . declaracion
    (6) programa -> OPEN .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 6 (programa -> OPEN .)
    $end            reduce using rule 6 (programa -> OPEN .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    CLOSE           reduce using rule 22 (empty -> .)
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]
  ! $end            [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 56
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 3

    (3) programa -> declaracion . CLOSE
    (4) programa -> declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for CLOSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (programa -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    CLOSE           shift and go to state 57
    $end            reduce using rule 4 (programa -> declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 58

  ! CLOSE           [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! $end            [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! CLOSE           [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! $end            [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! CLOSE           [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! $end            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! CLOSE           [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! $end            [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! CLOSE           [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! $end            [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 4

    (5) programa -> CLOSE .

    $end            reduce using rule 5 (programa -> CLOSE .)


state 5

    (7) declaracion -> expression .

    CLOSE           reduce using rule 7 (declaracion -> expression .)
    RCORCHET        reduce using rule 7 (declaracion -> expression .)
    $end            reduce using rule 7 (declaracion -> expression .)
    ELSE            reduce using rule 7 (declaracion -> expression .)


state 6

    (8) declaracion -> expif .
    (44) expelse -> expif . ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> expif . ELSE LCORCHET declaracion
    (46) expelse -> expif . ELSE LCORCHET

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE           reduce using rule 8 (declaracion -> expif .)
    RCORCHET        reduce using rule 8 (declaracion -> expif .)
    $end            reduce using rule 8 (declaracion -> expif .)
    ELSE            shift and go to state 59

  ! ELSE            [ reduce using rule 8 (declaracion -> expif .) ]


state 7

    (9) declaracion -> expelse .

    CLOSE           reduce using rule 9 (declaracion -> expelse .)
    RCORCHET        reduce using rule 9 (declaracion -> expelse .)
    $end            reduce using rule 9 (declaracion -> expelse .)
    ELSE            reduce using rule 9 (declaracion -> expelse .)


state 8

    (10) declaracion -> expresionlogica .

    CLOSE           reduce using rule 10 (declaracion -> expresionlogica .)
    RCORCHET        reduce using rule 10 (declaracion -> expresionlogica .)
    $end            reduce using rule 10 (declaracion -> expresionlogica .)
    ELSE            reduce using rule 10 (declaracion -> expresionlogica .)


state 9

    (11) declaracion -> declararvariable .

    CLOSE           reduce using rule 11 (declaracion -> declararvariable .)
    RCORCHET        reduce using rule 11 (declaracion -> declararvariable .)
    $end            reduce using rule 11 (declaracion -> declararvariable .)
    ELSE            reduce using rule 11 (declaracion -> declararvariable .)


state 10

    (12) declaracion -> creacionfunciones .

    CLOSE           reduce using rule 12 (declaracion -> creacionfunciones .)
    RCORCHET        reduce using rule 12 (declaracion -> creacionfunciones .)
    $end            reduce using rule 12 (declaracion -> creacionfunciones .)
    ELSE            reduce using rule 12 (declaracion -> creacionfunciones .)


state 11

    (13) declaracion -> returnvalores .

    CLOSE           reduce using rule 13 (declaracion -> returnvalores .)
    RCORCHET        reduce using rule 13 (declaracion -> returnvalores .)
    $end            reduce using rule 13 (declaracion -> returnvalores .)
    ELSE            reduce using rule 13 (declaracion -> returnvalores .)


state 12

    (14) declaracion -> operador_object .

    CLOSE           reduce using rule 14 (declaracion -> operador_object .)
    RCORCHET        reduce using rule 14 (declaracion -> operador_object .)
    $end            reduce using rule 14 (declaracion -> operador_object .)
    ELSE            reduce using rule 14 (declaracion -> operador_object .)


state 13

    (15) declaracion -> print .

    CLOSE           reduce using rule 15 (declaracion -> print .)
    RCORCHET        reduce using rule 15 (declaracion -> print .)
    $end            reduce using rule 15 (declaracion -> print .)
    ELSE            reduce using rule 15 (declaracion -> print .)


state 14

    (16) declaracion -> arreglos .

    CLOSE           reduce using rule 16 (declaracion -> arreglos .)
    RCORCHET        reduce using rule 16 (declaracion -> arreglos .)
    $end            reduce using rule 16 (declaracion -> arreglos .)
    ELSE            reduce using rule 16 (declaracion -> arreglos .)


state 15

    (17) declaracion -> while .

    CLOSE           reduce using rule 17 (declaracion -> while .)
    RCORCHET        reduce using rule 17 (declaracion -> while .)
    $end            reduce using rule 17 (declaracion -> while .)
    ELSE            reduce using rule 17 (declaracion -> while .)


state 16

    (18) declaracion -> foreach .

    CLOSE           reduce using rule 18 (declaracion -> foreach .)
    RCORCHET        reduce using rule 18 (declaracion -> foreach .)
    $end            reduce using rule 18 (declaracion -> foreach .)
    ELSE            reduce using rule 18 (declaracion -> foreach .)


state 17

    (19) declaracion -> clase .

    CLOSE           reduce using rule 19 (declaracion -> clase .)
    RCORCHET        reduce using rule 19 (declaracion -> clase .)
    $end            reduce using rule 19 (declaracion -> clase .)
    ELSE            reduce using rule 19 (declaracion -> clase .)


state 18

    (28) expression -> ID . EQUALS operacion_matematica END
    (75) expresionlogica -> ID . operadorlogico ID
    (80) declararvariable -> ID . EQUALS tipo END
    (90) operador_object -> ID . EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (76) operadorlogico -> . AND
    (77) operadorlogico -> . OR
    (78) operadorlogico -> . XOR
    (79) operadorlogico -> . NOT

    EQUALS          shift and go to state 60
    AND             shift and go to state 62
    OR              shift and go to state 63
    XOR             shift and go to state 64
    NOT             shift and go to state 65

    operadorlogico                 shift and go to state 61

state 19

    (39) expif -> funcion_condicion . LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion . LPAREN comparacion RPAREN LCORCHET

    LPAREN          shift and go to state 66


state 20

    (43) expif -> RCORCHET .
    (49) expelse -> RCORCHET .
    (59) while -> RCORCHET .
    (64) foreach -> RCORCHET .
    (147) clase -> RCORCHET .

  ! reduce/reduce conflict for CLOSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expif -> RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 43 (expif -> RCORCHET .)
    CLOSE           reduce using rule 43 (expif -> RCORCHET .)
    RCORCHET        reduce using rule 43 (expif -> RCORCHET .)
    $end            reduce using rule 43 (expif -> RCORCHET .)
    ELSE            reduce using rule 43 (expif -> RCORCHET .)

  ! CLOSE           [ reduce using rule 49 (expelse -> RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 49 (expelse -> RCORCHET .) ]
  ! $end            [ reduce using rule 49 (expelse -> RCORCHET .) ]
  ! ELSE            [ reduce using rule 49 (expelse -> RCORCHET .) ]
  ! CLOSE           [ reduce using rule 59 (while -> RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 59 (while -> RCORCHET .) ]
  ! $end            [ reduce using rule 59 (while -> RCORCHET .) ]
  ! ELSE            [ reduce using rule 59 (while -> RCORCHET .) ]
  ! CLOSE           [ reduce using rule 64 (foreach -> RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 64 (foreach -> RCORCHET .) ]
  ! $end            [ reduce using rule 64 (foreach -> RCORCHET .) ]
  ! ELSE            [ reduce using rule 64 (foreach -> RCORCHET .) ]
  ! CLOSE           [ reduce using rule 147 (clase -> RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 147 (clase -> RCORCHET .) ]
  ! $end            [ reduce using rule 147 (clase -> RCORCHET .) ]
  ! ELSE            [ reduce using rule 147 (clase -> RCORCHET .) ]


state 21

    (21) creacionfunciones -> FUNCTION . FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET

    FNOMBRE         shift and go to state 67


state 22

    (25) returnvalores -> RETURN . termino END
    (26) returnvalores -> RETURN . creacionfunciones
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET

    NUMBER          shift and go to state 70
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72
    FUNCTION        shift and go to state 21

    termino                        shift and go to state 68
    creacionfunciones              shift and go to state 69

state 23

    (27) returnvalores -> empty .

    CLOSE           reduce using rule 27 (returnvalores -> empty .)
    RCORCHET        reduce using rule 27 (returnvalores -> empty .)
    $end            reduce using rule 27 (returnvalores -> empty .)
    ELSE            reduce using rule 27 (returnvalores -> empty .)


state 24

    (101) print -> funcion_print . LPAREN argument RPAREN END
    (102) print -> funcion_print . argument END
    (105) argument -> . ID
    (106) argument -> . TEXT

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    TEXT            shift and go to state 76

    argument                       shift and go to state 74

state 25

    (103) print -> ECHO . LPAREN valores_echo RPAREN END
    (104) print -> ECHO . valores_echo END
    (110) funcion_print -> ECHO .
    (107) valores_echo -> . argument COMA valores_echo
    (108) valores_echo -> . argument
    (105) argument -> . ID
    (106) argument -> . TEXT

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
    LPAREN          shift and go to state 77
    ID              shift and go to state 75
    TEXT            shift and go to state 76

  ! LPAREN          [ reduce using rule 110 (funcion_print -> ECHO .) ]
  ! ID              [ reduce using rule 110 (funcion_print -> ECHO .) ]
  ! TEXT            [ reduce using rule 110 (funcion_print -> ECHO .) ]

    valores_echo                   shift and go to state 78
    argument                       shift and go to state 79

state 26

    (114) arreglos -> funcion_arreglo . LPAREN ID RPAREN

    LPAREN          shift and go to state 80


state 27

    (55) while -> WHILE . LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> WHILE . LPAREN comparacion RPAREN LCORCHET

    LPAREN          shift and go to state 81


state 28

    (57) while -> control_bucle . RCORCHET
    (58) while -> control_bucle .
    (62) foreach -> control_bucle . RCORCHET
    (63) foreach -> control_bucle .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 58 (while -> control_bucle .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 58 (while -> control_bucle .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (while -> control_bucle .)
    RCORCHET        shift and go to state 82
    CLOSE           reduce using rule 58 (while -> control_bucle .)
    $end            reduce using rule 58 (while -> control_bucle .)
    ELSE            reduce using rule 58 (while -> control_bucle .)

  ! RCORCHET        [ reduce using rule 58 (while -> control_bucle .) ]
  ! CLOSE           [ reduce using rule 63 (foreach -> control_bucle .) ]
  ! RCORCHET        [ reduce using rule 63 (foreach -> control_bucle .) ]
  ! $end            [ reduce using rule 63 (foreach -> control_bucle .) ]
  ! ELSE            [ reduce using rule 63 (foreach -> control_bucle .) ]


state 29

    (60) foreach -> FOREACH . LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH . LPAREN ID AS ID RPAREN LCORCHET

    LPAREN          shift and go to state 83


state 30

    (143) clase -> CLASS . FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> CLASS . FNOMBRE LCORCHET

    FNOMBRE         shift and go to state 84


state 31

    (50) funcion_condicion -> IF .

    LPAREN          reduce using rule 50 (funcion_condicion -> IF .)


state 32

    (51) funcion_condicion -> ELSEIF .

    LPAREN          reduce using rule 51 (funcion_condicion -> ELSEIF .)


state 33

    (109) funcion_print -> VAR_EXPORT .

    LPAREN          reduce using rule 109 (funcion_print -> VAR_EXPORT .)
    ID              reduce using rule 109 (funcion_print -> VAR_EXPORT .)
    TEXT            reduce using rule 109 (funcion_print -> VAR_EXPORT .)


state 34

    (111) funcion_print -> PRINT .

    LPAREN          reduce using rule 111 (funcion_print -> PRINT .)
    ID              reduce using rule 111 (funcion_print -> PRINT .)
    TEXT            reduce using rule 111 (funcion_print -> PRINT .)


state 35

    (112) funcion_print -> PRINT_R .

    LPAREN          reduce using rule 112 (funcion_print -> PRINT_R .)
    ID              reduce using rule 112 (funcion_print -> PRINT_R .)
    TEXT            reduce using rule 112 (funcion_print -> PRINT_R .)


state 36

    (113) funcion_print -> VAR_DUMP .

    LPAREN          reduce using rule 113 (funcion_print -> VAR_DUMP .)
    ID              reduce using rule 113 (funcion_print -> VAR_DUMP .)
    TEXT            reduce using rule 113 (funcion_print -> VAR_DUMP .)


state 37

    (115) funcion_arreglo -> SUFFLE .

    LPAREN          reduce using rule 115 (funcion_arreglo -> SUFFLE .)


state 38

    (116) funcion_arreglo -> ARRAY_MERGE .

    LPAREN          reduce using rule 116 (funcion_arreglo -> ARRAY_MERGE .)


state 39

    (117) funcion_arreglo -> ARRAY_SEARCH .

    LPAREN          reduce using rule 117 (funcion_arreglo -> ARRAY_SEARCH .)


state 40

    (118) funcion_arreglo -> ARRAY_RAND .

    LPAREN          reduce using rule 118 (funcion_arreglo -> ARRAY_RAND .)


state 41

    (119) funcion_arreglo -> ARRAY_CHUNK .

    LPAREN          reduce using rule 119 (funcion_arreglo -> ARRAY_CHUNK .)


state 42

    (120) funcion_arreglo -> STR_SPLIT .

    LPAREN          reduce using rule 120 (funcion_arreglo -> STR_SPLIT .)


state 43

    (121) funcion_arreglo -> PREG_SPLIT .

    LPAREN          reduce using rule 121 (funcion_arreglo -> PREG_SPLIT .)


state 44

    (122) funcion_arreglo -> ARRAY_UNIQUE .

    LPAREN          reduce using rule 122 (funcion_arreglo -> ARRAY_UNIQUE .)


state 45

    (123) funcion_arreglo -> COUNT .

    LPAREN          reduce using rule 123 (funcion_arreglo -> COUNT .)


state 46

    (124) funcion_arreglo -> SIZEOF .

    LPAREN          reduce using rule 124 (funcion_arreglo -> SIZEOF .)


state 47

    (125) funcion_arreglo -> ARRAY_PUSH .

    LPAREN          reduce using rule 125 (funcion_arreglo -> ARRAY_PUSH .)


state 48

    (126) funcion_arreglo -> SORT .

    LPAREN          reduce using rule 126 (funcion_arreglo -> SORT .)


state 49

    (127) funcion_arreglo -> ASORT .

    LPAREN          reduce using rule 127 (funcion_arreglo -> ASORT .)


state 50

    (128) funcion_arreglo -> KSORT .

    LPAREN          reduce using rule 128 (funcion_arreglo -> KSORT .)


state 51

    (129) funcion_arreglo -> UNSET .

    LPAREN          reduce using rule 129 (funcion_arreglo -> UNSET .)


state 52

    (130) funcion_arreglo -> IMPLODE .

    LPAREN          reduce using rule 130 (funcion_arreglo -> IMPLODE .)


state 53

    (131) funcion_arreglo -> EXPLODE .

    LPAREN          reduce using rule 131 (funcion_arreglo -> EXPLODE .)


state 54

    (53) control_bucle -> BREAK .

    CLOSE           reduce using rule 53 (control_bucle -> BREAK .)
    RCORCHET        reduce using rule 53 (control_bucle -> BREAK .)
    $end            reduce using rule 53 (control_bucle -> BREAK .)
    ELSE            reduce using rule 53 (control_bucle -> BREAK .)


state 55

    (54) control_bucle -> CONTINUE .

    CLOSE           reduce using rule 54 (control_bucle -> CONTINUE .)
    RCORCHET        reduce using rule 54 (control_bucle -> CONTINUE .)
    $end            reduce using rule 54 (control_bucle -> CONTINUE .)
    ELSE            reduce using rule 54 (control_bucle -> CONTINUE .)


state 56

    (1) programa -> OPEN declaracion . CLOSE
    (2) programa -> OPEN declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for CLOSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> OPEN declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    CLOSE           shift and go to state 85
    $end            reduce using rule 2 (programa -> OPEN declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 58

  ! CLOSE           [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! $end            [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! CLOSE           [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! $end            [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! CLOSE           [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! $end            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! CLOSE           [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! $end            [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! CLOSE           [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! $end            [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 57

    (3) programa -> declaracion CLOSE .

    $end            reduce using rule 3 (programa -> declaracion CLOSE .)


state 58

    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for CLOSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 41 (expif -> declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    $end            reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! CLOSE           [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! $end            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! CLOSE           [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! $end            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]


state 59

    (44) expelse -> expif ELSE . LCORCHET declaracion RCORCHET
    (45) expelse -> expif ELSE . LCORCHET declaracion
    (46) expelse -> expif ELSE . LCORCHET

    LCORCHET        shift and go to state 86


state 60

    (28) expression -> ID EQUALS . operacion_matematica END
    (80) declararvariable -> ID EQUALS . tipo END
    (90) operador_object -> ID EQUALS . OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (29) operacion_matematica -> . termino operadores operacion_matematica
    (30) operacion_matematica -> . termino operadores termino
    (81) tipo -> . boolean
    (82) tipo -> . NUMBER
    (83) tipo -> . TEXT
    (84) tipo -> . NULL
    (85) tipo -> . archivos
    (86) tipo -> . array
    (87) tipo -> . new
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL
    (88) boolean -> . TRUE
    (89) boolean -> . FALSE
    (132) archivos -> . funcion_archivo LPAREN TEXT COMA TEXT RPAREN
    (91) array -> . ARRAY LPAREN valores_array RPAREN
    (100) new -> . NEW FNOMBRE
    (133) funcion_archivo -> . FGETS
    (134) funcion_archivo -> . FREAD
    (135) funcion_archivo -> . FSCANF
    (136) funcion_archivo -> . FPASSTHRU
    (137) funcion_archivo -> . FGETCSV
    (138) funcion_archivo -> . FGETC
    (139) funcion_archivo -> . FILE_GET_CONTENTS
    (140) funcion_archivo -> . READFILE
    (141) funcion_archivo -> . FILE
    (142) funcion_archivo -> . PARSE_INI_FILE

    OBJECT_OPERATOR shift and go to state 89
    NUMBER          shift and go to state 92
    TEXT            shift and go to state 93
    NULL            shift and go to state 94
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ARRAY           shift and go to state 101
    NEW             shift and go to state 102
    FGETS           shift and go to state 103
    FREAD           shift and go to state 104
    FSCANF          shift and go to state 105
    FPASSTHRU       shift and go to state 106
    FGETCSV         shift and go to state 107
    FGETC           shift and go to state 108
    FILE_GET_CONTENTS shift and go to state 109
    READFILE        shift and go to state 110
    FILE            shift and go to state 111
    PARSE_INI_FILE  shift and go to state 112

    operacion_matematica           shift and go to state 87
    tipo                           shift and go to state 88
    termino                        shift and go to state 90
    boolean                        shift and go to state 91
    archivos                       shift and go to state 95
    array                          shift and go to state 96
    new                            shift and go to state 97
    funcion_archivo                shift and go to state 100

state 61

    (75) expresionlogica -> ID operadorlogico . ID

    ID              shift and go to state 113


state 62

    (76) operadorlogico -> AND .

    ID              reduce using rule 76 (operadorlogico -> AND .)


state 63

    (77) operadorlogico -> OR .

    ID              reduce using rule 77 (operadorlogico -> OR .)


state 64

    (78) operadorlogico -> XOR .

    ID              reduce using rule 78 (operadorlogico -> XOR .)


state 65

    (79) operadorlogico -> NOT .

    ID              reduce using rule 79 (operadorlogico -> NOT .)


state 66

    (39) expif -> funcion_condicion LPAREN . comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN . comparacion RPAREN LCORCHET
    (65) comparacion -> . termino operadorcomparacion termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 70
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72

    comparacion                    shift and go to state 114
    termino                        shift and go to state 115

state 67

    (21) creacionfunciones -> FUNCTION FNOMBRE . LPAREN RPAREN LCORCHET declaracion RCORCHET

    LPAREN          shift and go to state 116


state 68

    (25) returnvalores -> RETURN termino . END

    END             shift and go to state 117


state 69

    (26) returnvalores -> RETURN creacionfunciones .

    CLOSE           reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    RCORCHET        reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    $end            reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)
    ELSE            reduce using rule 26 (returnvalores -> RETURN creacionfunciones .)


state 70

    (36) termino -> NUMBER .

    END             reduce using rule 36 (termino -> NUMBER .)
    IS_EQUAL        reduce using rule 36 (termino -> NUMBER .)
    IS_IDENTICAL    reduce using rule 36 (termino -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 36 (termino -> NUMBER .)
    IS_NOT_IDENTICAL reduce using rule 36 (termino -> NUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (termino -> NUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (termino -> NUMBER .)
    SPACESHIP       reduce using rule 36 (termino -> NUMBER .)
    MAYORQUE        reduce using rule 36 (termino -> NUMBER .)
    MENORQUE        reduce using rule 36 (termino -> NUMBER .)
    PLUS            reduce using rule 36 (termino -> NUMBER .)
    MINUS           reduce using rule 36 (termino -> NUMBER .)
    DIVIDE          reduce using rule 36 (termino -> NUMBER .)
    TIMES           reduce using rule 36 (termino -> NUMBER .)
    MODULO          reduce using rule 36 (termino -> NUMBER .)
    RPAREN          reduce using rule 36 (termino -> NUMBER .)


state 71

    (37) termino -> ID .

    END             reduce using rule 37 (termino -> ID .)
    PLUS            reduce using rule 37 (termino -> ID .)
    MINUS           reduce using rule 37 (termino -> ID .)
    DIVIDE          reduce using rule 37 (termino -> ID .)
    TIMES           reduce using rule 37 (termino -> ID .)
    MODULO          reduce using rule 37 (termino -> ID .)
    IS_EQUAL        reduce using rule 37 (termino -> ID .)
    IS_IDENTICAL    reduce using rule 37 (termino -> ID .)
    IS_NOT_EQUAL    reduce using rule 37 (termino -> ID .)
    IS_NOT_IDENTICAL reduce using rule 37 (termino -> ID .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (termino -> ID .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (termino -> ID .)
    SPACESHIP       reduce using rule 37 (termino -> ID .)
    MAYORQUE        reduce using rule 37 (termino -> ID .)
    MENORQUE        reduce using rule 37 (termino -> ID .)
    RPAREN          reduce using rule 37 (termino -> ID .)


state 72

    (38) termino -> DECIMAL .

    END             reduce using rule 38 (termino -> DECIMAL .)
    PLUS            reduce using rule 38 (termino -> DECIMAL .)
    MINUS           reduce using rule 38 (termino -> DECIMAL .)
    DIVIDE          reduce using rule 38 (termino -> DECIMAL .)
    TIMES           reduce using rule 38 (termino -> DECIMAL .)
    MODULO          reduce using rule 38 (termino -> DECIMAL .)
    IS_EQUAL        reduce using rule 38 (termino -> DECIMAL .)
    IS_IDENTICAL    reduce using rule 38 (termino -> DECIMAL .)
    IS_NOT_EQUAL    reduce using rule 38 (termino -> DECIMAL .)
    IS_NOT_IDENTICAL reduce using rule 38 (termino -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (termino -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (termino -> DECIMAL .)
    SPACESHIP       reduce using rule 38 (termino -> DECIMAL .)
    MAYORQUE        reduce using rule 38 (termino -> DECIMAL .)
    MENORQUE        reduce using rule 38 (termino -> DECIMAL .)
    RPAREN          reduce using rule 38 (termino -> DECIMAL .)


state 73

    (101) print -> funcion_print LPAREN . argument RPAREN END
    (105) argument -> . ID
    (106) argument -> . TEXT

    ID              shift and go to state 75
    TEXT            shift and go to state 76

    argument                       shift and go to state 118

state 74

    (102) print -> funcion_print argument . END

    END             shift and go to state 119


state 75

    (105) argument -> ID .

    END             reduce using rule 105 (argument -> ID .)
    COMA            reduce using rule 105 (argument -> ID .)
    RPAREN          reduce using rule 105 (argument -> ID .)


state 76

    (106) argument -> TEXT .

    END             reduce using rule 106 (argument -> TEXT .)
    COMA            reduce using rule 106 (argument -> TEXT .)
    RPAREN          reduce using rule 106 (argument -> TEXT .)


state 77

    (103) print -> ECHO LPAREN . valores_echo RPAREN END
    (107) valores_echo -> . argument COMA valores_echo
    (108) valores_echo -> . argument
    (105) argument -> . ID
    (106) argument -> . TEXT

    ID              shift and go to state 75
    TEXT            shift and go to state 76

    valores_echo                   shift and go to state 120
    argument                       shift and go to state 79

state 78

    (104) print -> ECHO valores_echo . END

    END             shift and go to state 121


state 79

    (107) valores_echo -> argument . COMA valores_echo
    (108) valores_echo -> argument .

    COMA            shift and go to state 122
    END             reduce using rule 108 (valores_echo -> argument .)
    RPAREN          reduce using rule 108 (valores_echo -> argument .)


state 80

    (114) arreglos -> funcion_arreglo LPAREN . ID RPAREN

    ID              shift and go to state 123


state 81

    (55) while -> WHILE LPAREN . comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> WHILE LPAREN . comparacion RPAREN LCORCHET
    (65) comparacion -> . termino operadorcomparacion termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 70
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72

    comparacion                    shift and go to state 124
    termino                        shift and go to state 115

state 82

    (57) while -> control_bucle RCORCHET .
    (62) foreach -> control_bucle RCORCHET .

  ! reduce/reduce conflict for CLOSE resolved using rule 57 (while -> control_bucle RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 57 (while -> control_bucle RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 57 (while -> control_bucle RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 57 (while -> control_bucle RCORCHET .)
    CLOSE           reduce using rule 57 (while -> control_bucle RCORCHET .)
    RCORCHET        reduce using rule 57 (while -> control_bucle RCORCHET .)
    $end            reduce using rule 57 (while -> control_bucle RCORCHET .)
    ELSE            reduce using rule 57 (while -> control_bucle RCORCHET .)

  ! CLOSE           [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]
  ! $end            [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]
  ! ELSE            [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]


state 83

    (60) foreach -> FOREACH LPAREN . ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN . ID AS ID RPAREN LCORCHET

    ID              shift and go to state 125


state 84

    (143) clase -> CLASS FNOMBRE . LCORCHET declaracion RCORCHET
    (144) clase -> CLASS FNOMBRE . LCORCHET

    LCORCHET        shift and go to state 126


state 85

    (1) programa -> OPEN declaracion CLOSE .

    $end            reduce using rule 1 (programa -> OPEN declaracion CLOSE .)


state 86

    (44) expelse -> expif ELSE LCORCHET . declaracion RCORCHET
    (45) expelse -> expif ELSE LCORCHET . declaracion
    (46) expelse -> expif ELSE LCORCHET .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for $end resolved using rule 22 (empty -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    CLOSE           reduce using rule 22 (empty -> .)
    $end            reduce using rule 22 (empty -> .)
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! CLOSE           [ reduce using rule 46 (expelse -> expif ELSE LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 46 (expelse -> expif ELSE LCORCHET .) ]
  ! $end            [ reduce using rule 46 (expelse -> expif ELSE LCORCHET .) ]
  ! ELSE            [ reduce using rule 46 (expelse -> expif ELSE LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    expif                          shift and go to state 6
    declaracion                    shift and go to state 127
    expression                     shift and go to state 5
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 87

    (28) expression -> ID EQUALS operacion_matematica . END

    END             shift and go to state 128


state 88

    (80) declararvariable -> ID EQUALS tipo . END

    END             shift and go to state 129


state 89

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR . FNOMBRE LPAREN argumentos RPAREN END

    FNOMBRE         shift and go to state 130


state 90

    (29) operacion_matematica -> termino . operadores operacion_matematica
    (30) operacion_matematica -> termino . operadores termino
    (31) operadores -> . PLUS
    (32) operadores -> . MINUS
    (33) operadores -> . DIVIDE
    (34) operadores -> . TIMES
    (35) operadores -> . MODULO

    PLUS            shift and go to state 132
    MINUS           shift and go to state 133
    DIVIDE          shift and go to state 134
    TIMES           shift and go to state 135
    MODULO          shift and go to state 136

    operadores                     shift and go to state 131

state 91

    (81) tipo -> boolean .

    END             reduce using rule 81 (tipo -> boolean .)


state 92

    (82) tipo -> NUMBER .
    (36) termino -> NUMBER .

    END             reduce using rule 82 (tipo -> NUMBER .)
    PLUS            reduce using rule 36 (termino -> NUMBER .)
    MINUS           reduce using rule 36 (termino -> NUMBER .)
    DIVIDE          reduce using rule 36 (termino -> NUMBER .)
    TIMES           reduce using rule 36 (termino -> NUMBER .)
    MODULO          reduce using rule 36 (termino -> NUMBER .)


state 93

    (83) tipo -> TEXT .

    END             reduce using rule 83 (tipo -> TEXT .)


state 94

    (84) tipo -> NULL .

    END             reduce using rule 84 (tipo -> NULL .)


state 95

    (85) tipo -> archivos .

    END             reduce using rule 85 (tipo -> archivos .)


state 96

    (86) tipo -> array .

    END             reduce using rule 86 (tipo -> array .)


state 97

    (87) tipo -> new .

    END             reduce using rule 87 (tipo -> new .)


state 98

    (88) boolean -> TRUE .

    END             reduce using rule 88 (boolean -> TRUE .)
    COMA            reduce using rule 88 (boolean -> TRUE .)
    RPAREN          reduce using rule 88 (boolean -> TRUE .)


state 99

    (89) boolean -> FALSE .

    END             reduce using rule 89 (boolean -> FALSE .)
    COMA            reduce using rule 89 (boolean -> FALSE .)
    RPAREN          reduce using rule 89 (boolean -> FALSE .)


state 100

    (132) archivos -> funcion_archivo . LPAREN TEXT COMA TEXT RPAREN

    LPAREN          shift and go to state 137


state 101

    (91) array -> ARRAY . LPAREN valores_array RPAREN

    LPAREN          shift and go to state 138


state 102

    (100) new -> NEW . FNOMBRE

    FNOMBRE         shift and go to state 139


state 103

    (133) funcion_archivo -> FGETS .

    LPAREN          reduce using rule 133 (funcion_archivo -> FGETS .)


state 104

    (134) funcion_archivo -> FREAD .

    LPAREN          reduce using rule 134 (funcion_archivo -> FREAD .)


state 105

    (135) funcion_archivo -> FSCANF .

    LPAREN          reduce using rule 135 (funcion_archivo -> FSCANF .)


state 106

    (136) funcion_archivo -> FPASSTHRU .

    LPAREN          reduce using rule 136 (funcion_archivo -> FPASSTHRU .)


state 107

    (137) funcion_archivo -> FGETCSV .

    LPAREN          reduce using rule 137 (funcion_archivo -> FGETCSV .)


state 108

    (138) funcion_archivo -> FGETC .

    LPAREN          reduce using rule 138 (funcion_archivo -> FGETC .)


state 109

    (139) funcion_archivo -> FILE_GET_CONTENTS .

    LPAREN          reduce using rule 139 (funcion_archivo -> FILE_GET_CONTENTS .)


state 110

    (140) funcion_archivo -> READFILE .

    LPAREN          reduce using rule 140 (funcion_archivo -> READFILE .)


state 111

    (141) funcion_archivo -> FILE .

    LPAREN          reduce using rule 141 (funcion_archivo -> FILE .)


state 112

    (142) funcion_archivo -> PARSE_INI_FILE .

    LPAREN          reduce using rule 142 (funcion_archivo -> PARSE_INI_FILE .)


state 113

    (75) expresionlogica -> ID operadorlogico ID .

    CLOSE           reduce using rule 75 (expresionlogica -> ID operadorlogico ID .)
    RCORCHET        reduce using rule 75 (expresionlogica -> ID operadorlogico ID .)
    $end            reduce using rule 75 (expresionlogica -> ID operadorlogico ID .)
    ELSE            reduce using rule 75 (expresionlogica -> ID operadorlogico ID .)


state 114

    (39) expif -> funcion_condicion LPAREN comparacion . RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion . RPAREN LCORCHET

    RPAREN          shift and go to state 140


state 115

    (65) comparacion -> termino . operadorcomparacion termino
    (66) operadorcomparacion -> . IS_EQUAL
    (67) operadorcomparacion -> . IS_IDENTICAL
    (68) operadorcomparacion -> . IS_NOT_EQUAL
    (69) operadorcomparacion -> . IS_NOT_IDENTICAL
    (70) operadorcomparacion -> . IS_GREATER_OR_EQUAL
    (71) operadorcomparacion -> . IS_SMALLER_OR_EQUAL
    (72) operadorcomparacion -> . SPACESHIP
    (73) operadorcomparacion -> . MAYORQUE
    (74) operadorcomparacion -> . MENORQUE

    IS_EQUAL        shift and go to state 142
    IS_IDENTICAL    shift and go to state 143
    IS_NOT_EQUAL    shift and go to state 144
    IS_NOT_IDENTICAL shift and go to state 145
    IS_GREATER_OR_EQUAL shift and go to state 146
    IS_SMALLER_OR_EQUAL shift and go to state 147
    SPACESHIP       shift and go to state 148
    MAYORQUE        shift and go to state 149
    MENORQUE        shift and go to state 150

    operadorcomparacion            shift and go to state 141

state 116

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN . RPAREN LCORCHET declaracion RCORCHET

    RPAREN          shift and go to state 151


state 117

    (25) returnvalores -> RETURN termino END .

    CLOSE           reduce using rule 25 (returnvalores -> RETURN termino END .)
    RCORCHET        reduce using rule 25 (returnvalores -> RETURN termino END .)
    $end            reduce using rule 25 (returnvalores -> RETURN termino END .)
    ELSE            reduce using rule 25 (returnvalores -> RETURN termino END .)


state 118

    (101) print -> funcion_print LPAREN argument . RPAREN END

    RPAREN          shift and go to state 152


state 119

    (102) print -> funcion_print argument END .

    CLOSE           reduce using rule 102 (print -> funcion_print argument END .)
    RCORCHET        reduce using rule 102 (print -> funcion_print argument END .)
    $end            reduce using rule 102 (print -> funcion_print argument END .)
    ELSE            reduce using rule 102 (print -> funcion_print argument END .)


state 120

    (103) print -> ECHO LPAREN valores_echo . RPAREN END

    RPAREN          shift and go to state 153


state 121

    (104) print -> ECHO valores_echo END .

    CLOSE           reduce using rule 104 (print -> ECHO valores_echo END .)
    RCORCHET        reduce using rule 104 (print -> ECHO valores_echo END .)
    $end            reduce using rule 104 (print -> ECHO valores_echo END .)
    ELSE            reduce using rule 104 (print -> ECHO valores_echo END .)


state 122

    (107) valores_echo -> argument COMA . valores_echo
    (107) valores_echo -> . argument COMA valores_echo
    (108) valores_echo -> . argument
    (105) argument -> . ID
    (106) argument -> . TEXT

    ID              shift and go to state 75
    TEXT            shift and go to state 76

    argument                       shift and go to state 79
    valores_echo                   shift and go to state 154

state 123

    (114) arreglos -> funcion_arreglo LPAREN ID . RPAREN

    RPAREN          shift and go to state 155


state 124

    (55) while -> WHILE LPAREN comparacion . RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> WHILE LPAREN comparacion . RPAREN LCORCHET

    RPAREN          shift and go to state 156


state 125

    (60) foreach -> FOREACH LPAREN ID . AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN ID . AS ID RPAREN LCORCHET

    AS              shift and go to state 157


state 126

    (143) clase -> CLASS FNOMBRE LCORCHET . declaracion RCORCHET
    (144) clase -> CLASS FNOMBRE LCORCHET .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    CLOSE           reduce using rule 144 (clase -> CLASS FNOMBRE LCORCHET .)
    $end            reduce using rule 144 (clase -> CLASS FNOMBRE LCORCHET .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! RCORCHET        [ reduce using rule 144 (clase -> CLASS FNOMBRE LCORCHET .) ]
  ! ELSE            [ reduce using rule 144 (clase -> CLASS FNOMBRE LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 158
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 127

    (44) expelse -> expif ELSE LCORCHET declaracion . RCORCHET
    (45) expelse -> expif ELSE LCORCHET declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for CLOSE resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for $end resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 159
    CLOSE           reduce using rule 20 (declaracion -> declaracion .)
    $end            reduce using rule 20 (declaracion -> declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! CLOSE           [ reduce using rule 45 (expelse -> expif ELSE LCORCHET declaracion .) ]
  ! RCORCHET        [ reduce using rule 45 (expelse -> expif ELSE LCORCHET declaracion .) ]
  ! $end            [ reduce using rule 45 (expelse -> expif ELSE LCORCHET declaracion .) ]
  ! ELSE            [ reduce using rule 45 (expelse -> expif ELSE LCORCHET declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! CLOSE           [ reduce using rule 42 (expif -> declaracion .) ]
  ! $end            [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! CLOSE           [ reduce using rule 47 (expelse -> declaracion .) ]
  ! $end            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! CLOSE           [ reduce using rule 146 (clase -> declaracion .) ]
  ! $end            [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! CLOSE           [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! $end            [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 128

    (28) expression -> ID EQUALS operacion_matematica END .

    CLOSE           reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    RCORCHET        reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    $end            reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)
    ELSE            reduce using rule 28 (expression -> ID EQUALS operacion_matematica END .)


state 129

    (80) declararvariable -> ID EQUALS tipo END .

    CLOSE           reduce using rule 80 (declararvariable -> ID EQUALS tipo END .)
    RCORCHET        reduce using rule 80 (declararvariable -> ID EQUALS tipo END .)
    $end            reduce using rule 80 (declararvariable -> ID EQUALS tipo END .)
    ELSE            reduce using rule 80 (declararvariable -> ID EQUALS tipo END .)


state 130

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE . LPAREN argumentos RPAREN END

    LPAREN          shift and go to state 160


state 131

    (29) operacion_matematica -> termino operadores . operacion_matematica
    (30) operacion_matematica -> termino operadores . termino
    (29) operacion_matematica -> . termino operadores operacion_matematica
    (30) operacion_matematica -> . termino operadores termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 70
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72

    termino                        shift and go to state 161
    operacion_matematica           shift and go to state 162

state 132

    (31) operadores -> PLUS .

    NUMBER          reduce using rule 31 (operadores -> PLUS .)
    ID              reduce using rule 31 (operadores -> PLUS .)
    DECIMAL         reduce using rule 31 (operadores -> PLUS .)


state 133

    (32) operadores -> MINUS .

    NUMBER          reduce using rule 32 (operadores -> MINUS .)
    ID              reduce using rule 32 (operadores -> MINUS .)
    DECIMAL         reduce using rule 32 (operadores -> MINUS .)


state 134

    (33) operadores -> DIVIDE .

    NUMBER          reduce using rule 33 (operadores -> DIVIDE .)
    ID              reduce using rule 33 (operadores -> DIVIDE .)
    DECIMAL         reduce using rule 33 (operadores -> DIVIDE .)


state 135

    (34) operadores -> TIMES .

    NUMBER          reduce using rule 34 (operadores -> TIMES .)
    ID              reduce using rule 34 (operadores -> TIMES .)
    DECIMAL         reduce using rule 34 (operadores -> TIMES .)


state 136

    (35) operadores -> MODULO .

    NUMBER          reduce using rule 35 (operadores -> MODULO .)
    ID              reduce using rule 35 (operadores -> MODULO .)
    DECIMAL         reduce using rule 35 (operadores -> MODULO .)


state 137

    (132) archivos -> funcion_archivo LPAREN . TEXT COMA TEXT RPAREN

    TEXT            shift and go to state 163


state 138

    (91) array -> ARRAY LPAREN . valores_array RPAREN
    (92) valores_array -> . elementos_array COMA valores_array
    (93) valores_array -> . elementos_array
    (94) valores_array -> . empty
    (95) elementos_array -> . NUMBER
    (96) elementos_array -> . TEXT
    (97) elementos_array -> . empty
    (98) elementos_array -> . boolean
    (99) elementos_array -> . array
    (22) empty -> .
    (88) boolean -> . TRUE
    (89) boolean -> . FALSE
    (91) array -> . ARRAY LPAREN valores_array RPAREN

    NUMBER          shift and go to state 167
    TEXT            shift and go to state 168
    RPAREN          reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ARRAY           shift and go to state 101

    valores_array                  shift and go to state 164
    elementos_array                shift and go to state 165
    empty                          shift and go to state 166
    boolean                        shift and go to state 169
    array                          shift and go to state 170

state 139

    (100) new -> NEW FNOMBRE .

    END             reduce using rule 100 (new -> NEW FNOMBRE .)


state 140

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN . LCORCHET declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion RPAREN . LCORCHET

    LCORCHET        shift and go to state 171


state 141

    (65) comparacion -> termino operadorcomparacion . termino
    (36) termino -> . NUMBER
    (37) termino -> . ID
    (38) termino -> . DECIMAL

    NUMBER          shift and go to state 70
    ID              shift and go to state 71
    DECIMAL         shift and go to state 72

    termino                        shift and go to state 172

state 142

    (66) operadorcomparacion -> IS_EQUAL .

    NUMBER          reduce using rule 66 (operadorcomparacion -> IS_EQUAL .)
    ID              reduce using rule 66 (operadorcomparacion -> IS_EQUAL .)
    DECIMAL         reduce using rule 66 (operadorcomparacion -> IS_EQUAL .)


state 143

    (67) operadorcomparacion -> IS_IDENTICAL .

    NUMBER          reduce using rule 67 (operadorcomparacion -> IS_IDENTICAL .)
    ID              reduce using rule 67 (operadorcomparacion -> IS_IDENTICAL .)
    DECIMAL         reduce using rule 67 (operadorcomparacion -> IS_IDENTICAL .)


state 144

    (68) operadorcomparacion -> IS_NOT_EQUAL .

    NUMBER          reduce using rule 68 (operadorcomparacion -> IS_NOT_EQUAL .)
    ID              reduce using rule 68 (operadorcomparacion -> IS_NOT_EQUAL .)
    DECIMAL         reduce using rule 68 (operadorcomparacion -> IS_NOT_EQUAL .)


state 145

    (69) operadorcomparacion -> IS_NOT_IDENTICAL .

    NUMBER          reduce using rule 69 (operadorcomparacion -> IS_NOT_IDENTICAL .)
    ID              reduce using rule 69 (operadorcomparacion -> IS_NOT_IDENTICAL .)
    DECIMAL         reduce using rule 69 (operadorcomparacion -> IS_NOT_IDENTICAL .)


state 146

    (70) operadorcomparacion -> IS_GREATER_OR_EQUAL .

    NUMBER          reduce using rule 70 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)
    ID              reduce using rule 70 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 70 (operadorcomparacion -> IS_GREATER_OR_EQUAL .)


state 147

    (71) operadorcomparacion -> IS_SMALLER_OR_EQUAL .

    NUMBER          reduce using rule 71 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)
    ID              reduce using rule 71 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 71 (operadorcomparacion -> IS_SMALLER_OR_EQUAL .)


state 148

    (72) operadorcomparacion -> SPACESHIP .

    NUMBER          reduce using rule 72 (operadorcomparacion -> SPACESHIP .)
    ID              reduce using rule 72 (operadorcomparacion -> SPACESHIP .)
    DECIMAL         reduce using rule 72 (operadorcomparacion -> SPACESHIP .)


state 149

    (73) operadorcomparacion -> MAYORQUE .

    NUMBER          reduce using rule 73 (operadorcomparacion -> MAYORQUE .)
    ID              reduce using rule 73 (operadorcomparacion -> MAYORQUE .)
    DECIMAL         reduce using rule 73 (operadorcomparacion -> MAYORQUE .)


state 150

    (74) operadorcomparacion -> MENORQUE .

    NUMBER          reduce using rule 74 (operadorcomparacion -> MENORQUE .)
    ID              reduce using rule 74 (operadorcomparacion -> MENORQUE .)
    DECIMAL         reduce using rule 74 (operadorcomparacion -> MENORQUE .)


state 151

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN . LCORCHET declaracion RCORCHET

    LCORCHET        shift and go to state 173


state 152

    (101) print -> funcion_print LPAREN argument RPAREN . END

    END             shift and go to state 174


state 153

    (103) print -> ECHO LPAREN valores_echo RPAREN . END

    END             shift and go to state 175


state 154

    (107) valores_echo -> argument COMA valores_echo .

    END             reduce using rule 107 (valores_echo -> argument COMA valores_echo .)
    RPAREN          reduce using rule 107 (valores_echo -> argument COMA valores_echo .)


state 155

    (114) arreglos -> funcion_arreglo LPAREN ID RPAREN .

    CLOSE           reduce using rule 114 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    RCORCHET        reduce using rule 114 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    $end            reduce using rule 114 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)
    ELSE            reduce using rule 114 (arreglos -> funcion_arreglo LPAREN ID RPAREN .)


state 156

    (55) while -> WHILE LPAREN comparacion RPAREN . LCORCHET control_bucle RCORCHET
    (56) while -> WHILE LPAREN comparacion RPAREN . LCORCHET

    LCORCHET        shift and go to state 176


state 157

    (60) foreach -> FOREACH LPAREN ID AS . ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN ID AS . ID RPAREN LCORCHET

    ID              shift and go to state 177


state 158

    (143) clase -> CLASS FNOMBRE LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 178
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 159

    (44) expelse -> expif ELSE LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for CLOSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 41 (expif -> declaracion RCORCHET .)
    $end            reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! CLOSE           [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]
  ! $end            [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 44 (expelse -> expif ELSE LCORCHET declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! CLOSE           [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! $end            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! CLOSE           [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! $end            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]


state 160

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN . argumentos RPAREN END
    (23) argumentos -> . ID
    (24) argumentos -> . empty
    (22) empty -> .

    ID              shift and go to state 179
    RPAREN          reduce using rule 22 (empty -> .)

    argumentos                     shift and go to state 180
    empty                          shift and go to state 181

state 161

    (30) operacion_matematica -> termino operadores termino .
    (29) operacion_matematica -> termino . operadores operacion_matematica
    (30) operacion_matematica -> termino . operadores termino
    (31) operadores -> . PLUS
    (32) operadores -> . MINUS
    (33) operadores -> . DIVIDE
    (34) operadores -> . TIMES
    (35) operadores -> . MODULO

    END             reduce using rule 30 (operacion_matematica -> termino operadores termino .)
    PLUS            shift and go to state 132
    MINUS           shift and go to state 133
    DIVIDE          shift and go to state 134
    TIMES           shift and go to state 135
    MODULO          shift and go to state 136

    operadores                     shift and go to state 131

state 162

    (29) operacion_matematica -> termino operadores operacion_matematica .

    END             reduce using rule 29 (operacion_matematica -> termino operadores operacion_matematica .)


state 163

    (132) archivos -> funcion_archivo LPAREN TEXT . COMA TEXT RPAREN

    COMA            shift and go to state 182


state 164

    (91) array -> ARRAY LPAREN valores_array . RPAREN

    RPAREN          shift and go to state 183


state 165

    (92) valores_array -> elementos_array . COMA valores_array
    (93) valores_array -> elementos_array .

    COMA            shift and go to state 184
    RPAREN          reduce using rule 93 (valores_array -> elementos_array .)


state 166

    (94) valores_array -> empty .
    (97) elementos_array -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 94 (valores_array -> empty .)
    RPAREN          reduce using rule 94 (valores_array -> empty .)
    COMA            reduce using rule 97 (elementos_array -> empty .)

  ! RPAREN          [ reduce using rule 97 (elementos_array -> empty .) ]


state 167

    (95) elementos_array -> NUMBER .

    COMA            reduce using rule 95 (elementos_array -> NUMBER .)
    RPAREN          reduce using rule 95 (elementos_array -> NUMBER .)


state 168

    (96) elementos_array -> TEXT .

    COMA            reduce using rule 96 (elementos_array -> TEXT .)
    RPAREN          reduce using rule 96 (elementos_array -> TEXT .)


state 169

    (98) elementos_array -> boolean .

    COMA            reduce using rule 98 (elementos_array -> boolean .)
    RPAREN          reduce using rule 98 (elementos_array -> boolean .)


state 170

    (99) elementos_array -> array .

    COMA            reduce using rule 99 (elementos_array -> array .)
    RPAREN          reduce using rule 99 (elementos_array -> array .)


state 171

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET . declaracion RCORCHET
    (40) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    CLOSE           reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .)
    $end            reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! RCORCHET        [ reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .) ]
  ! ELSE            [ reduce using rule 40 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    funcion_condicion              shift and go to state 19
    declaracion                    shift and go to state 185
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 172

    (65) comparacion -> termino operadorcomparacion termino .

    RPAREN          reduce using rule 65 (comparacion -> termino operadorcomparacion termino .)


state 173

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET . declaracion RCORCHET
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 186
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 174

    (101) print -> funcion_print LPAREN argument RPAREN END .

    CLOSE           reduce using rule 101 (print -> funcion_print LPAREN argument RPAREN END .)
    RCORCHET        reduce using rule 101 (print -> funcion_print LPAREN argument RPAREN END .)
    $end            reduce using rule 101 (print -> funcion_print LPAREN argument RPAREN END .)
    ELSE            reduce using rule 101 (print -> funcion_print LPAREN argument RPAREN END .)


state 175

    (103) print -> ECHO LPAREN valores_echo RPAREN END .

    CLOSE           reduce using rule 103 (print -> ECHO LPAREN valores_echo RPAREN END .)
    RCORCHET        reduce using rule 103 (print -> ECHO LPAREN valores_echo RPAREN END .)
    $end            reduce using rule 103 (print -> ECHO LPAREN valores_echo RPAREN END .)
    ELSE            reduce using rule 103 (print -> ECHO LPAREN valores_echo RPAREN END .)


state 176

    (55) while -> WHILE LPAREN comparacion RPAREN LCORCHET . control_bucle RCORCHET
    (56) while -> WHILE LPAREN comparacion RPAREN LCORCHET .
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    CLOSE           reduce using rule 56 (while -> WHILE LPAREN comparacion RPAREN LCORCHET .)
    $end            reduce using rule 56 (while -> WHILE LPAREN comparacion RPAREN LCORCHET .)
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53

  ! RCORCHET        [ reduce using rule 56 (while -> WHILE LPAREN comparacion RPAREN LCORCHET .) ]
  ! ELSE            [ reduce using rule 56 (while -> WHILE LPAREN comparacion RPAREN LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    control_bucle                  shift and go to state 187
    declaracion                    shift and go to state 188
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26

state 177

    (60) foreach -> FOREACH LPAREN ID AS ID . RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN ID AS ID . RPAREN LCORCHET

    RPAREN          shift and go to state 189


state 178

    (143) clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 143 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 143 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 143 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 143 (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]


state 179

    (23) argumentos -> ID .

    RPAREN          reduce using rule 23 (argumentos -> ID .)


state 180

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos . RPAREN END

    RPAREN          shift and go to state 190


state 181

    (24) argumentos -> empty .

    RPAREN          reduce using rule 24 (argumentos -> empty .)


state 182

    (132) archivos -> funcion_archivo LPAREN TEXT COMA . TEXT RPAREN

    TEXT            shift and go to state 191


state 183

    (91) array -> ARRAY LPAREN valores_array RPAREN .

    END             reduce using rule 91 (array -> ARRAY LPAREN valores_array RPAREN .)
    COMA            reduce using rule 91 (array -> ARRAY LPAREN valores_array RPAREN .)
    RPAREN          reduce using rule 91 (array -> ARRAY LPAREN valores_array RPAREN .)


state 184

    (92) valores_array -> elementos_array COMA . valores_array
    (92) valores_array -> . elementos_array COMA valores_array
    (93) valores_array -> . elementos_array
    (94) valores_array -> . empty
    (95) elementos_array -> . NUMBER
    (96) elementos_array -> . TEXT
    (97) elementos_array -> . empty
    (98) elementos_array -> . boolean
    (99) elementos_array -> . array
    (22) empty -> .
    (88) boolean -> . TRUE
    (89) boolean -> . FALSE
    (91) array -> . ARRAY LPAREN valores_array RPAREN

    NUMBER          shift and go to state 167
    TEXT            shift and go to state 168
    RPAREN          reduce using rule 22 (empty -> .)
    COMA            reduce using rule 22 (empty -> .)
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ARRAY           shift and go to state 101

    elementos_array                shift and go to state 165
    valores_array                  shift and go to state 192
    empty                          shift and go to state 166
    boolean                        shift and go to state 169
    array                          shift and go to state 170

state 185

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 193
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 186

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 194
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 187

    (55) while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle . RCORCHET
    (57) while -> control_bucle . RCORCHET
    (58) while -> control_bucle .
    (62) foreach -> control_bucle . RCORCHET
    (63) foreach -> control_bucle .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 58 (while -> control_bucle .)
    RCORCHET        shift and go to state 195
    ELSE            reduce using rule 58 (while -> control_bucle .)

  ! RCORCHET        [ reduce using rule 58 (while -> control_bucle .) ]
  ! RCORCHET        [ reduce using rule 63 (foreach -> control_bucle .) ]
  ! ELSE            [ reduce using rule 63 (foreach -> control_bucle .) ]


state 188

    (52) control_bucle -> declaracion .
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .

  ! reduce/reduce conflict for RCORCHET resolved using rule 20 (declaracion -> declaracion .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    ELSE            reduce using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 58

  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]


state 189

    (60) foreach -> FOREACH LPAREN ID AS ID RPAREN . LCORCHET declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN ID AS ID RPAREN . LCORCHET

    LCORCHET        shift and go to state 196


state 190

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN . END

    END             shift and go to state 197


state 191

    (132) archivos -> funcion_archivo LPAREN TEXT COMA TEXT . RPAREN

    RPAREN          shift and go to state 198


state 192

    (92) valores_array -> elementos_array COMA valores_array .

    RPAREN          reduce using rule 92 (valores_array -> elementos_array COMA valores_array .)


state 193

    (39) expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    CLOSE           reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)
    ELSE            reduce using rule 39 (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]


state 194

    (21) creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    CLOSE           reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)
    ELSE            reduce using rule 21 (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 41 (expif -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]


state 195

    (55) while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .
    (57) while -> control_bucle RCORCHET .
    (62) foreach -> control_bucle RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    CLOSE           reduce using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    RCORCHET        reduce using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    $end            reduce using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)
    ELSE            reduce using rule 55 (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET .)

  ! RCORCHET        [ reduce using rule 57 (while -> control_bucle RCORCHET .) ]
  ! ELSE            [ reduce using rule 57 (while -> control_bucle RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]
  ! ELSE            [ reduce using rule 62 (foreach -> control_bucle RCORCHET .) ]


state 196

    (60) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET . declaracion RCORCHET
    (61) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET .
    (7) declaracion -> . expression
    (8) declaracion -> . expif
    (9) declaracion -> . expelse
    (10) declaracion -> . expresionlogica
    (11) declaracion -> . declararvariable
    (12) declaracion -> . creacionfunciones
    (13) declaracion -> . returnvalores
    (14) declaracion -> . operador_object
    (15) declaracion -> . print
    (16) declaracion -> . arreglos
    (17) declaracion -> . while
    (18) declaracion -> . foreach
    (19) declaracion -> . clase
    (20) declaracion -> . declaracion
    (28) expression -> . ID EQUALS operacion_matematica END
    (39) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET
    (40) expif -> . funcion_condicion LPAREN comparacion RPAREN LCORCHET
    (41) expif -> . declaracion RCORCHET
    (42) expif -> . declaracion
    (43) expif -> . RCORCHET
    (44) expelse -> . expif ELSE LCORCHET declaracion RCORCHET
    (45) expelse -> . expif ELSE LCORCHET declaracion
    (46) expelse -> . expif ELSE LCORCHET
    (47) expelse -> . declaracion
    (48) expelse -> . declaracion RCORCHET
    (49) expelse -> . RCORCHET
    (75) expresionlogica -> . ID operadorlogico ID
    (80) declararvariable -> . ID EQUALS tipo END
    (21) creacionfunciones -> . FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET
    (25) returnvalores -> . RETURN termino END
    (26) returnvalores -> . RETURN creacionfunciones
    (27) returnvalores -> . empty
    (90) operador_object -> . ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END
    (101) print -> . funcion_print LPAREN argument RPAREN END
    (102) print -> . funcion_print argument END
    (103) print -> . ECHO LPAREN valores_echo RPAREN END
    (104) print -> . ECHO valores_echo END
    (114) arreglos -> . funcion_arreglo LPAREN ID RPAREN
    (55) while -> . WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET
    (56) while -> . WHILE LPAREN comparacion RPAREN LCORCHET
    (57) while -> . control_bucle RCORCHET
    (58) while -> . control_bucle
    (59) while -> . RCORCHET
    (60) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET
    (61) foreach -> . FOREACH LPAREN ID AS ID RPAREN LCORCHET
    (62) foreach -> . control_bucle RCORCHET
    (63) foreach -> . control_bucle
    (64) foreach -> . RCORCHET
    (143) clase -> . CLASS FNOMBRE LCORCHET declaracion RCORCHET
    (144) clase -> . CLASS FNOMBRE LCORCHET
    (145) clase -> . declaracion RCORCHET
    (146) clase -> . declaracion
    (147) clase -> . RCORCHET
    (50) funcion_condicion -> . IF
    (51) funcion_condicion -> . ELSEIF
    (22) empty -> .
    (109) funcion_print -> . VAR_EXPORT
    (110) funcion_print -> . ECHO
    (111) funcion_print -> . PRINT
    (112) funcion_print -> . PRINT_R
    (113) funcion_print -> . VAR_DUMP
    (115) funcion_arreglo -> . SUFFLE
    (116) funcion_arreglo -> . ARRAY_MERGE
    (117) funcion_arreglo -> . ARRAY_SEARCH
    (118) funcion_arreglo -> . ARRAY_RAND
    (119) funcion_arreglo -> . ARRAY_CHUNK
    (120) funcion_arreglo -> . STR_SPLIT
    (121) funcion_arreglo -> . PREG_SPLIT
    (122) funcion_arreglo -> . ARRAY_UNIQUE
    (123) funcion_arreglo -> . COUNT
    (124) funcion_arreglo -> . SIZEOF
    (125) funcion_arreglo -> . ARRAY_PUSH
    (126) funcion_arreglo -> . SORT
    (127) funcion_arreglo -> . ASORT
    (128) funcion_arreglo -> . KSORT
    (129) funcion_arreglo -> . UNSET
    (130) funcion_arreglo -> . IMPLODE
    (131) funcion_arreglo -> . EXPLODE
    (52) control_bucle -> . declaracion
    (53) control_bucle -> . BREAK
    (54) control_bucle -> . CONTINUE

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 22 (empty -> .)
    CLOSE           reduce using rule 61 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET .)
    $end            reduce using rule 61 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET .)
    ID              shift and go to state 18
    RCORCHET        shift and go to state 20
    FUNCTION        shift and go to state 21
    RETURN          shift and go to state 22
    ECHO            shift and go to state 25
    WHILE           shift and go to state 27
    FOREACH         shift and go to state 29
    CLASS           shift and go to state 30
    IF              shift and go to state 31
    ELSEIF          shift and go to state 32
    ELSE            reduce using rule 22 (empty -> .)
    VAR_EXPORT      shift and go to state 33
    PRINT           shift and go to state 34
    PRINT_R         shift and go to state 35
    VAR_DUMP        shift and go to state 36
    SUFFLE          shift and go to state 37
    ARRAY_MERGE     shift and go to state 38
    ARRAY_SEARCH    shift and go to state 39
    ARRAY_RAND      shift and go to state 40
    ARRAY_CHUNK     shift and go to state 41
    STR_SPLIT       shift and go to state 42
    PREG_SPLIT      shift and go to state 43
    ARRAY_UNIQUE    shift and go to state 44
    COUNT           shift and go to state 45
    SIZEOF          shift and go to state 46
    ARRAY_PUSH      shift and go to state 47
    SORT            shift and go to state 48
    ASORT           shift and go to state 49
    KSORT           shift and go to state 50
    UNSET           shift and go to state 51
    IMPLODE         shift and go to state 52
    EXPLODE         shift and go to state 53
    BREAK           shift and go to state 54
    CONTINUE        shift and go to state 55

  ! RCORCHET        [ reduce using rule 61 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET .) ]
  ! ELSE            [ reduce using rule 61 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET .) ]
  ! RCORCHET        [ reduce using rule 22 (empty -> .) ]

    declaracion                    shift and go to state 199
    expression                     shift and go to state 5
    expif                          shift and go to state 6
    expelse                        shift and go to state 7
    expresionlogica                shift and go to state 8
    declararvariable               shift and go to state 9
    creacionfunciones              shift and go to state 10
    returnvalores                  shift and go to state 11
    operador_object                shift and go to state 12
    print                          shift and go to state 13
    arreglos                       shift and go to state 14
    while                          shift and go to state 15
    foreach                        shift and go to state 16
    clase                          shift and go to state 17
    funcion_condicion              shift and go to state 19
    empty                          shift and go to state 23
    funcion_print                  shift and go to state 24
    funcion_arreglo                shift and go to state 26
    control_bucle                  shift and go to state 28

state 197

    (90) operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .

    CLOSE           reduce using rule 90 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    RCORCHET        reduce using rule 90 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    $end            reduce using rule 90 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)
    ELSE            reduce using rule 90 (operador_object -> ID EQUALS OBJECT_OPERATOR FNOMBRE LPAREN argumentos RPAREN END .)


state 198

    (132) archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN .

    END             reduce using rule 132 (archivos -> funcion_archivo LPAREN TEXT COMA TEXT RPAREN .)


state 199

    (60) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion . RCORCHET
    (20) declaracion -> declaracion .
    (41) expif -> declaracion . RCORCHET
    (42) expif -> declaracion .
    (47) expelse -> declaracion .
    (48) expelse -> declaracion . RCORCHET
    (145) clase -> declaracion . RCORCHET
    (146) clase -> declaracion .
    (52) control_bucle -> declaracion .

  ! shift/reduce conflict for RCORCHET resolved as shift
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
  ! shift/reduce conflict for RCORCHET resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 20 (declaracion -> declaracion .)
    RCORCHET        shift and go to state 200
    ELSE            reduce using rule 20 (declaracion -> declaracion .)

  ! RCORCHET        [ reduce using rule 20 (declaracion -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 42 (expif -> declaracion .) ]
  ! ELSE            [ reduce using rule 42 (expif -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 47 (expelse -> declaracion .) ]
  ! ELSE            [ reduce using rule 47 (expelse -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 146 (clase -> declaracion .) ]
  ! ELSE            [ reduce using rule 146 (clase -> declaracion .) ]
  ! RCORCHET        [ reduce using rule 52 (control_bucle -> declaracion .) ]
  ! ELSE            [ reduce using rule 52 (control_bucle -> declaracion .) ]


state 200

    (60) foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET .
    (41) expif -> declaracion RCORCHET .
    (48) expelse -> declaracion RCORCHET .
    (145) clase -> declaracion RCORCHET .

  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for RCORCHET resolved using rule 41 (expif -> declaracion RCORCHET .)
  ! reduce/reduce conflict for ELSE resolved using rule 41 (expif -> declaracion RCORCHET .)
    CLOSE           reduce using rule 60 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET .)
    $end            reduce using rule 60 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET .)
    RCORCHET        reduce using rule 41 (expif -> declaracion RCORCHET .)
    ELSE            reduce using rule 41 (expif -> declaracion RCORCHET .)

  ! RCORCHET        [ reduce using rule 60 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 60 (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 48 (expelse -> declaracion RCORCHET .) ]
  ! RCORCHET        [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]
  ! ELSE            [ reduce using rule 145 (clase -> declaracion RCORCHET .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLOSE in state 0 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 0 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 3 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 6 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 25 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 28 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 28 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 56 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 56 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 56 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 56 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 56 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 86 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 86 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 126 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 126 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 127 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 158 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 158 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 158 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 158 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 158 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 171 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 171 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 173 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 176 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 176 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 185 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 185 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 185 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 185 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 185 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 186 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 187 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 187 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 188 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 188 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 188 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 188 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 196 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 196 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 199 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 199 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 199 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 199 resolved as shift
WARNING: shift/reduce conflict for RCORCHET in state 199 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (programa -> OPEN)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (declaracion -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (programa -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 3
WARNING: reduce/reduce conflict in state 20 resolved using rule (expif -> RCORCHET)
WARNING: rejected rule (expelse -> RCORCHET) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (expif -> RCORCHET)
WARNING: rejected rule (while -> RCORCHET) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (expif -> RCORCHET)
WARNING: rejected rule (foreach -> RCORCHET) in state 20
WARNING: reduce/reduce conflict in state 20 resolved using rule (expif -> RCORCHET)
WARNING: rejected rule (clase -> RCORCHET) in state 20
WARNING: reduce/reduce conflict in state 28 resolved using rule (while -> control_bucle)
WARNING: rejected rule (foreach -> control_bucle) in state 28
WARNING: reduce/reduce conflict in state 56 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (declaracion -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (expif -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (clase -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (programa -> OPEN declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 56
WARNING: reduce/reduce conflict in state 58 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 58
WARNING: reduce/reduce conflict in state 82 resolved using rule (while -> control_bucle RCORCHET)
WARNING: rejected rule (foreach -> control_bucle RCORCHET) in state 82
WARNING: reduce/reduce conflict in state 86 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expelse -> expif ELSE LCORCHET) in state 86
WARNING: reduce/reduce conflict in state 126 resolved using rule (empty -> <empty>)
WARNING: rejected rule (clase -> CLASS FNOMBRE LCORCHET) in state 126
WARNING: reduce/reduce conflict in state 127 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> expif ELSE LCORCHET declaracion) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 127
WARNING: reduce/reduce conflict in state 127 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 127
WARNING: reduce/reduce conflict in state 158 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 158
WARNING: reduce/reduce conflict in state 158 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 158
WARNING: reduce/reduce conflict in state 158 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 158
WARNING: reduce/reduce conflict in state 158 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 158
WARNING: reduce/reduce conflict in state 159 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> expif ELSE LCORCHET declaracion RCORCHET) in state 159
WARNING: reduce/reduce conflict in state 159 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 159
WARNING: reduce/reduce conflict in state 159 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 159
WARNING: reduce/reduce conflict in state 166 resolved using rule (valores_array -> empty)
WARNING: rejected rule (elementos_array -> empty) in state 166
WARNING: reduce/reduce conflict in state 171 resolved using rule (empty -> <empty>)
WARNING: rejected rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET) in state 171
WARNING: reduce/reduce conflict in state 176 resolved using rule (empty -> <empty>)
WARNING: rejected rule (while -> WHILE LPAREN comparacion RPAREN LCORCHET) in state 176
WARNING: reduce/reduce conflict in state 178 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> CLASS FNOMBRE LCORCHET declaracion RCORCHET) in state 178
WARNING: reduce/reduce conflict in state 178 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 178
WARNING: reduce/reduce conflict in state 178 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 178
WARNING: reduce/reduce conflict in state 185 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 185
WARNING: reduce/reduce conflict in state 185 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 185
WARNING: reduce/reduce conflict in state 185 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 185
WARNING: reduce/reduce conflict in state 185 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 186 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (while -> control_bucle)
WARNING: rejected rule (foreach -> control_bucle) in state 187
WARNING: reduce/reduce conflict in state 188 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 188
WARNING: reduce/reduce conflict in state 188 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 188
WARNING: reduce/reduce conflict in state 188 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 188
WARNING: reduce/reduce conflict in state 188 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 188
WARNING: reduce/reduce conflict in state 193 resolved using rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expif -> declaracion RCORCHET) in state 193
WARNING: reduce/reduce conflict in state 193 resolved using rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 193
WARNING: reduce/reduce conflict in state 193 resolved using rule (expif -> funcion_condicion LPAREN comparacion RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 193
WARNING: reduce/reduce conflict in state 194 resolved using rule (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expif -> declaracion RCORCHET) in state 194
WARNING: reduce/reduce conflict in state 194 resolved using rule (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 194
WARNING: reduce/reduce conflict in state 194 resolved using rule (creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 194
WARNING: reduce/reduce conflict in state 195 resolved using rule (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET)
WARNING: rejected rule (while -> control_bucle RCORCHET) in state 195
WARNING: reduce/reduce conflict in state 195 resolved using rule (while -> WHILE LPAREN comparacion RPAREN LCORCHET control_bucle RCORCHET)
WARNING: rejected rule (foreach -> control_bucle RCORCHET) in state 195
WARNING: reduce/reduce conflict in state 196 resolved using rule (empty -> <empty>)
WARNING: rejected rule (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET) in state 196
WARNING: reduce/reduce conflict in state 199 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expif -> declaracion) in state 199
WARNING: reduce/reduce conflict in state 199 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (expelse -> declaracion) in state 199
WARNING: reduce/reduce conflict in state 199 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (clase -> declaracion) in state 199
WARNING: reduce/reduce conflict in state 199 resolved using rule (declaracion -> declaracion)
WARNING: rejected rule (control_bucle -> declaracion) in state 199
WARNING: reduce/reduce conflict in state 200 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (foreach -> FOREACH LPAREN ID AS ID RPAREN LCORCHET declaracion RCORCHET) in state 200
WARNING: reduce/reduce conflict in state 200 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (expelse -> declaracion RCORCHET) in state 200
WARNING: reduce/reduce conflict in state 200 resolved using rule (expif -> declaracion RCORCHET)
WARNING: rejected rule (clase -> declaracion RCORCHET) in state 200
WARNING: Rule (expif -> declaracion) is never reduced
WARNING: Rule (expelse -> declaracion) is never reduced
WARNING: Rule (clase -> declaracion) is never reduced
WARNING: Rule (control_bucle -> declaracion) is never reduced
WARNING: Rule (expelse -> RCORCHET) is never reduced
WARNING: Rule (while -> RCORCHET) is never reduced
WARNING: Rule (foreach -> RCORCHET) is never reduced
WARNING: Rule (clase -> RCORCHET) is never reduced
WARNING: Rule (foreach -> control_bucle) is never reduced
WARNING: Rule (expelse -> declaracion RCORCHET) is never reduced
WARNING: Rule (clase -> declaracion RCORCHET) is never reduced
WARNING: Rule (foreach -> control_bucle RCORCHET) is never reduced
WARNING: Rule (expelse -> expif ELSE LCORCHET) is never reduced
WARNING: Rule (expelse -> expif ELSE LCORCHET declaracion) is never reduced
WARNING: Rule (expelse -> expif ELSE LCORCHET declaracion RCORCHET) is never reduced


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAYPUSH ARRAY_CHUNK ARRAY_MERGE ARRAY_RAND ARRAY_SEARCH ARRAY_UNIQUE ASORT BOOLEAN BREAK CLASS CLOSE COMA CONTINUE COUNT DECIMAL DIVIDE ECHO ELSE ELSEIF END EQUALS EXPLODE FALSE FGETC FGETCSV FGETS FILE FILE_GET_CONTENTS FLOAT FNOMBRE FOREACH FPASSTHRU FREAD FSCANF FUNCTION ID IF IMPLODE IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL KSORT LCORCHET LPAREN MAYORQUE MENORQUE MINUS MODULO NEW NOT NULL NUMBER OBJECT OBJECT_OPERATOR OPEN OR PARSE_INI_FILE PEIROT PLUS PREG_SPLIT PRINT PRINT_R RCORCHET READFILE RETURN RPAREN SIZEOF SORT SPACESHIP STRING STR_SPLIT SUFFLE TEXT TIMES TRUE UNSET VAR_DUMP VAR_EXPORT XORprograma : OPEN declaracion CLOSEdeclaracion : expression\n                        | expif\n                        | expresionlogica\n                        | declararvariable\n                        | array\n                        | creacionfunciones\n                        | returnvalores\n\n\n\n                       creacionfunciones : FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET argumentos :   ID\n                    | empty\n\n                    returnvalores :  RETURN termino END\n                      | RETURN creacionfunciones\n                      | empty expression : termino operadores terminooperadores : PLUS\n                    | MINUS\n                    | DIVIDE\n                    | TIMES\n                    | MODULOtermino : NUMBER\n                    | IDexpif : IF LPAREN comparacion RPAREN LCORCHET expression RCORCHETcomparacion : termino operadorcomparacion terminooperadorcomparacion : IS_EQUAL\n                            | IS_IDENTICAL\n                            | IS_NOT_EQUAL\n                            | IS_NOT_IDENTICAL\n                            | IS_GREATER_OR_EQUAL\n                            | IS_SMALLER_OR_EQUAL\n                            | SPACESHIP\n                            | MAYORQUE\n                            | MENORQUE funprint : PRINT LPAREN TEXT RPAREN ENDfpassthru : FPASSTHRU LPAREN ID COMA NUMBER RPARENfgets : FGETS LPAREN ID RPARENexpresionlogica : ID operadorlogico IDoperadorlogico : AND\n                        | OR\n                        | XOR\n                        | NOT  declararvariable : ID EQUALS NUMBER\n                         | ID EQUALS boolean\n                         | ID EQUALS TEXT\n                         | ID EQUALS NULL\n                         | ID EQUALS DECIMAL\n                         boolean : TRUE\n                | FALSEarray : ID EQUALS ARRAY LPAREN TEXT RPAREN ENDfunecho : ECHO TEXT ENDempty :\n  '
    
_lr_action_items = {'OPEN':([0,],[2,]),'$end':([1,18,],[0,-1,]),'IF':([2,66,],[12,12,]),'ID':([2,16,19,20,21,22,23,24,25,26,28,29,30,31,51,52,53,54,55,56,57,58,59,60,63,66,],[13,35,35,-16,-17,-18,-19,-20,35,39,-38,-39,-40,-41,35,-25,-26,-27,-28,-29,-30,-31,-32,-33,35,13,]),'FUNCTION':([2,16,66,],[15,15,15,]),'RETURN':([2,66,],[16,16,]),'NUMBER':([2,16,19,20,21,22,23,24,25,27,51,52,53,54,55,56,57,58,59,60,63,66,],[14,14,14,-16,-17,-18,-19,-20,14,40,14,-25,-26,-27,-28,-29,-30,-31,-32,-33,14,14,]),'CLOSE':([2,3,4,5,6,7,8,9,10,14,17,34,35,36,39,40,41,42,43,44,46,47,49,70,71,72,],[-51,18,-2,-3,-4,-5,-6,-7,-8,-21,-14,-13,-22,-15,-37,-42,-43,-44,-45,-46,-47,-48,-12,-23,-49,-9,]),'RCORCHET':([4,5,6,7,8,9,10,14,17,34,35,36,39,40,41,42,43,44,46,47,49,66,67,69,70,71,72,],[-2,-3,-4,-5,-6,-7,-8,-21,-14,-13,-22,-15,-37,-42,-43,-44,-45,-46,-47,-48,-12,-51,70,72,-23,-49,-9,]),'PLUS':([11,13,14,35,],[20,-22,-21,-22,]),'MINUS':([11,13,14,35,],[21,-22,-21,-22,]),'DIVIDE':([11,13,14,35,],[22,-22,-21,-22,]),'TIMES':([11,13,14,35,],[23,-22,-21,-22,]),'MODULO':([11,13,14,35,],[24,-22,-21,-22,]),'LPAREN':([12,32,45,],[25,48,61,]),'EQUALS':([13,],[27,]),'AND':([13,],[28,]),'OR':([13,],[29,]),'XOR':([13,],[30,]),'NOT':([13,],[31,]),'END':([14,33,35,68,],[-21,49,-22,71,]),'IS_EQUAL':([14,35,38,],[-21,-22,52,]),'IS_IDENTICAL':([14,35,38,],[-21,-22,53,]),'IS_NOT_EQUAL':([14,35,38,],[-21,-22,54,]),'IS_NOT_IDENTICAL':([14,35,38,],[-21,-22,55,]),'IS_GREATER_OR_EQUAL':([14,35,38,],[-21,-22,56,]),'IS_SMALLER_OR_EQUAL':([14,35,38,],[-21,-22,57,]),'SPACESHIP':([14,35,38,],[-21,-22,58,]),'MAYORQUE':([14,35,38,],[-21,-22,59,]),'MENORQUE':([14,35,38,],[-21,-22,60,]),'RPAREN':([14,35,37,48,64,65,],[-21,-22,50,62,-24,68,]),'FNOMBRE':([15,],[32,]),'TEXT':([27,61,],[42,65,]),'NULL':([27,],[43,]),'DECIMAL':([27,],[44,]),'ARRAY':([27,],[45,]),'TRUE':([27,],[46,]),'FALSE':([27,],[47,]),'LCORCHET':([50,62,],[63,66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion':([2,66,],[3,69,]),'expression':([2,63,66,],[4,67,4,]),'expif':([2,66,],[5,5,]),'expresionlogica':([2,66,],[6,6,]),'declararvariable':([2,66,],[7,7,]),'array':([2,66,],[8,8,]),'creacionfunciones':([2,16,66,],[9,34,9,]),'returnvalores':([2,66,],[10,10,]),'termino':([2,16,19,25,51,63,66,],[11,33,36,38,64,11,11,]),'empty':([2,66,],[17,17,]),'operadores':([11,],[19,]),'operadorlogico':([13,],[26,]),'comparacion':([25,],[37,]),'boolean':([27,],[41,]),'operadorcomparacion':([38,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> OPEN declaracion CLOSE','programa',3,'p_programa','sintactico.py',7),
  ('declaracion -> expression','declaracion',1,'p_declaracion','sintactico.py',11),
  ('declaracion -> expif','declaracion',1,'p_declaracion','sintactico.py',12),
  ('declaracion -> expresionlogica','declaracion',1,'p_declaracion','sintactico.py',13),
  ('declaracion -> declararvariable','declaracion',1,'p_declaracion','sintactico.py',14),
  ('declaracion -> array','declaracion',1,'p_declaracion','sintactico.py',15),
  ('declaracion -> creacionfunciones','declaracion',1,'p_declaracion','sintactico.py',16),
  ('declaracion -> returnvalores','declaracion',1,'p_declaracion','sintactico.py',17),
  ('creacionfunciones -> FUNCTION FNOMBRE LPAREN RPAREN LCORCHET declaracion RCORCHET','creacionfunciones',7,'p_creacionfunciones','sintactico.py',25),
  ('argumentos -> ID','argumentos',1,'p_argumentos','sintactico.py',28),
  ('argumentos -> empty','argumentos',1,'p_argumentos','sintactico.py',29),
  ('returnvalores -> RETURN termino END','returnvalores',3,'p_returnvalores','sintactico.py',34),
  ('returnvalores -> RETURN creacionfunciones','returnvalores',2,'p_returnvalores','sintactico.py',35),
  ('returnvalores -> empty','returnvalores',1,'p_returnvalores','sintactico.py',36),
  ('expression -> termino operadores termino','expression',3,'p_expression_math','sintactico.py',40),
  ('operadores -> PLUS','operadores',1,'p_operadores','sintactico.py',45),
  ('operadores -> MINUS','operadores',1,'p_operadores','sintactico.py',46),
  ('operadores -> DIVIDE','operadores',1,'p_operadores','sintactico.py',47),
  ('operadores -> TIMES','operadores',1,'p_operadores','sintactico.py',48),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',49),
  ('termino -> NUMBER','termino',1,'p_termino','sintactico.py',53),
  ('termino -> ID','termino',1,'p_termino','sintactico.py',54),
  ('expif -> IF LPAREN comparacion RPAREN LCORCHET expression RCORCHET','expif',7,'p_expif','sintactico.py',57),
  ('comparacion -> termino operadorcomparacion termino','comparacion',3,'p_comparacion','sintactico.py',61),
  ('operadorcomparacion -> IS_EQUAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',65),
  ('operadorcomparacion -> IS_IDENTICAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',66),
  ('operadorcomparacion -> IS_NOT_EQUAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',67),
  ('operadorcomparacion -> IS_NOT_IDENTICAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',68),
  ('operadorcomparacion -> IS_GREATER_OR_EQUAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',69),
  ('operadorcomparacion -> IS_SMALLER_OR_EQUAL','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',70),
  ('operadorcomparacion -> SPACESHIP','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',71),
  ('operadorcomparacion -> MAYORQUE','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',72),
  ('operadorcomparacion -> MENORQUE','operadorcomparacion',1,'p_operadorcomparacion','sintactico.py',73),
  ('funprint -> PRINT LPAREN TEXT RPAREN END','funprint',5,'p_funprint','sintactico.py',77),
  ('fpassthru -> FPASSTHRU LPAREN ID COMA NUMBER RPAREN','fpassthru',6,'p_fpassthru','sintactico.py',81),
  ('fgets -> FGETS LPAREN ID RPAREN','fgets',4,'p_fgets','sintactico.py',84),
  ('expresionlogica -> ID operadorlogico ID','expresionlogica',3,'p_expresionlogica','sintactico.py',87),
  ('operadorlogico -> AND','operadorlogico',1,'p_operadorlogico','sintactico.py',90),
  ('operadorlogico -> OR','operadorlogico',1,'p_operadorlogico','sintactico.py',91),
  ('operadorlogico -> XOR','operadorlogico',1,'p_operadorlogico','sintactico.py',92),
  ('operadorlogico -> NOT','operadorlogico',1,'p_operadorlogico','sintactico.py',93),
  ('declararvariable -> ID EQUALS NUMBER','declararvariable',3,'p_declararvariable','sintactico.py',97),
  ('declararvariable -> ID EQUALS boolean','declararvariable',3,'p_declararvariable','sintactico.py',98),
  ('declararvariable -> ID EQUALS TEXT','declararvariable',3,'p_declararvariable','sintactico.py',99),
  ('declararvariable -> ID EQUALS NULL','declararvariable',3,'p_declararvariable','sintactico.py',100),
  ('declararvariable -> ID EQUALS DECIMAL','declararvariable',3,'p_declararvariable','sintactico.py',101),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',105),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',106),
  ('array -> ID EQUALS ARRAY LPAREN TEXT RPAREN END','array',7,'p_array','sintactico.py',110),
  ('funecho -> ECHO TEXT END','funecho',3,'p_funecho','sintactico.py',119),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',122),
]
